{
  "components": {
    "callbacks": {},
    "headers": {},
    "parameters": {},
    "requestBodies": {},
    "responses": {
      "200": {
        "description": "OK. Indicates that the request has succeeded. A 200 response is cacheable by default. The meaning of a success depends on the HTTP request method."
      },
      "201": {
        "description": "Created. The POST-ed resource was created."
      },
      "204": {
        "description": "No Content. The resource was updated."
      },
      "400": {
        "description": "Bad request. Request contains wrong or is missing required data"
      },
      "401": {
        "description": "Unauthorized. The client must authenticate itself to get the requested response."
      },
      "403": {
        "description": "Forbidden. The client does not have access rights to the content."
      },
      "404": {
        "description": "Not found. The requested resource does not exist in server."
      },
      "405": {
        "description": "Method Not Allowed. The request method is known by the server but has been disabled and cannot be used."
      },
      "409": {
        "description": "Conflict. This response is sent when a request conflicts with the current state of the server."
      },
      "416": {
        "description": "Range Not Satisfiable. Indicates that a server cannot serve the requested ranges. The most likely reason is that the document doesn't contain such ranges, or that the Range header value, though syntactically correct, doesn't make sense."
      },
      "426": {
        "description": "Source or destination resource of a method is locked. Indicates that resource is read-only."
      },
      "429": {
        "description": "Too Many Requests. Indicates the user has sent too many requests in a given amount of time ('rate limiting'). A Retry-After header might be included to this response indicating how long to wait before making a new request."
      },
      "500": {
        "description": "Internal Server Error. indicates that the server encountered an unexpected condition that prevented it from fulfilling the request. This error response is a generic 'catch-all' response"
      },
      "503": {
        "description": "Service unavailable. The server is currently unable to handle the request due to a temporary overloading or maintenance of the server. The implication is that this is a temporary condition which will be alleviated after some delay. If known, the length of the delay MAY be indicated in a Retry-After header."
      },
      "504": {
        "description": "Gateway Timeout server. Indicates that the server, while acting as a gateway or proxy, did not get a response in time from the upstream server that it needed in order to complete the request."
      }
    },
    "schemas": {
      "Address": {
        "additionalProperties": false,
        "description": "Address Schema (value object)",
        "properties": {
          "city": {
            "description": "City name",
            "type": "string"
          },
          "countryCode": {
            "description": "ISO 3166 country code",
            "type": "string"
          },
          "lines": {
            "description": "Pass codes for authorizing access to Operation data",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "postalCode": {
            "description": "Postal, state or zip code",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Affiliate": {
        "additionalProperties": false,
        "description": "Affiliate information",
        "properties": {
          "active": {
            "description": "Affiliation status flag",
            "type": "boolean"
          },
          "dep": {
            "additionalProperties": false,
            "description": "Department which personnel is affiliated with",
            "properties": {
              "type": {
                "default": "Department",
                "description": "Department Type",
                "readOnly": false,
                "type": "string"
              },
              "uuid": {
                "description": "Department UUID",
                "format": "uuid",
                "readOnly": false,
                "type": "string"
              }
            },
            "readOnly": false,
            "required": [
              "uuid"
            ],
            "type": "object"
          },
          "div": {
            "additionalProperties": false,
            "description": "Division which personnel is affiliated with",
            "properties": {
              "type": {
                "default": "Division",
                "description": "Division Type",
                "readOnly": false,
                "type": "string"
              },
              "uuid": {
                "description": "Division UUID",
                "format": "uuid",
                "readOnly": false,
                "type": "string"
              }
            },
            "readOnly": false,
            "required": [
              "uuid"
            ],
            "type": "object"
          },
          "org": {
            "additionalProperties": false,
            "description": "Organisation which personnel is affiliated with",
            "properties": {
              "type": {
                "default": "Organisation",
                "description": "Organisation Type",
                "readOnly": false,
                "type": "string"
              },
              "uuid": {
                "description": "Organisation UUID",
                "format": "uuid",
                "readOnly": false,
                "type": "string"
              }
            },
            "readOnly": false,
            "required": [
              "uuid"
            ],
            "type": "object"
          },
          "person": {
            "$ref": "#/components/schemas/Person",
            "description": "Person"
          },
          "status": {
            "additionalProperties": false,
            "default": "available",
            "description": "Personnel standby status",
            "enum": [
              "available",
              "short_notice",
              "unavailable"
            ],
            "type": "string"
          },
          "type": {
            "additionalProperties": false,
            "default": "member",
            "description": "Affiliation type",
            "enum": [
              "member",
              "employee",
              "external",
              "volunteer"
            ],
            "type": "string"
          },
          "uuid": {
            "$ref": "#/components/schemas/UUID"
          }
        },
        "required": [
          "uuid",
          "type",
          "person",
          "active",
          "status"
        ],
        "type": "object"
      },
      "Affiliation": {
        "additionalProperties": false,
        "description": "Affiliation information",
        "properties": {
          "active": {
            "description": "Affiliation status flag",
            "type": "boolean"
          },
          "dep": {
            "additionalProperties": false,
            "description": "Department which personnel is affiliated with",
            "properties": {
              "type": {
                "default": "Department",
                "description": "Department Type",
                "readOnly": false,
                "type": "string"
              },
              "uuid": {
                "description": "Department UUID",
                "format": "uuid",
                "readOnly": false,
                "type": "string"
              }
            },
            "readOnly": false,
            "required": [
              "uuid"
            ],
            "type": "object"
          },
          "div": {
            "additionalProperties": false,
            "description": "Division which personnel is affiliated with",
            "properties": {
              "type": {
                "default": "Division",
                "description": "Division Type",
                "readOnly": false,
                "type": "string"
              },
              "uuid": {
                "description": "Division UUID",
                "format": "uuid",
                "readOnly": false,
                "type": "string"
              }
            },
            "readOnly": false,
            "required": [
              "uuid"
            ],
            "type": "object"
          },
          "org": {
            "additionalProperties": false,
            "description": "Organisation which personnel is affiliated with",
            "properties": {
              "type": {
                "default": "Organisation",
                "description": "Organisation Type",
                "readOnly": false,
                "type": "string"
              },
              "uuid": {
                "description": "Organisation UUID",
                "format": "uuid",
                "readOnly": false,
                "type": "string"
              }
            },
            "readOnly": false,
            "required": [
              "uuid"
            ],
            "type": "object"
          },
          "person": {
            "additionalProperties": false,
            "description": "Person reference for PII lookup",
            "properties": {
              "type": {
                "default": "Person",
                "description": "Person Type",
                "readOnly": true,
                "type": "string"
              },
              "uuid": {
                "description": "Person UUID",
                "format": "uuid",
                "readOnly": true,
                "type": "string"
              }
            },
            "readOnly": true,
            "required": [
              "uuid"
            ],
            "type": "object"
          },
          "status": {
            "additionalProperties": false,
            "default": "available",
            "description": "Personnel standby status",
            "enum": [
              "available",
              "short_notice",
              "unavailable"
            ],
            "type": "string"
          },
          "type": {
            "additionalProperties": false,
            "default": "member",
            "description": "Affiliation type",
            "enum": [
              "member",
              "employee",
              "external",
              "volunteer"
            ],
            "type": "string"
          },
          "uuid": {
            "$ref": "#/components/schemas/UUID"
          }
        },
        "required": [
          "person"
        ],
        "type": "object"
      },
      "AffiliationStandbyStatus": {
        "additionalProperties": false,
        "default": "member",
        "description": "Affiliation type",
        "enum": [
          "member",
          "employee",
          "external",
          "volunteer"
        ],
        "type": "string"
      },
      "AffiliationType": {
        "additionalProperties": false,
        "default": "member",
        "description": "Affiliation type",
        "enum": [
          "member",
          "employee",
          "external",
          "volunteer"
        ],
        "type": "string"
      },
      "AggregateList": {
        "additionalProperties": false,
        "description": "List of Aggregate Root uuids",
        "items": {
          "description": "A [universally unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier).",
          "format": "uuid",
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      },
      "AggregatePageResponse": {
        "description": "Entities Response",
        "properties": {
          "entries": {
            "description": "Array of Aggregate Objects",
            "items": {
              "description": "Aggregate Root Response",
              "properties": {
                "changed": {
                  "description": "When Aggregate was created",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "created": {
                  "description": "When Aggregate was created",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "data": {
                  "additionalProperties": true,
                  "description": "Aggregate Root Data",
                  "readOnly": true,
                  "type": "object"
                },
                "deleted": {
                  "description": "When Aggregate was created",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "number": {
                  "description": "Last event applied to aggregate (can be used as version)",
                  "readOnly": true,
                  "type": "integer"
                },
                "type": {
                  "description": "Aggregate Root Type",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "readOnly": true,
              "type": "object"
            },
            "readOnly": true,
            "type": "array"
          },
          "limit": {
            "description": "Aggregate Page size",
            "readOnly": true,
            "type": "integer"
          },
          "next": {
            "description": "Next Aggregate Page offset",
            "readOnly": true,
            "type": "integer"
          },
          "offset": {
            "description": "Aggregate Page offset",
            "readOnly": true,
            "type": "integer"
          },
          "total": {
            "description": "Number of aggregates",
            "readOnly": true,
            "type": "integer"
          }
        },
        "readOnly": true,
        "type": "object"
      },
      "AggregateRef": {
        "additionalProperties": false,
        "description": "Aggregate Root Reference",
        "properties": {
          "type": {
            "description": "Aggregate Root Type",
            "readOnly": true,
            "type": "string"
          },
          "uuid": {
            "description": "Aggregate Root UUID",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "readOnly": true,
        "required": [
          "uuid"
        ],
        "type": "object"
      },
      "AggregateResponse": {
        "description": "Aggregate Root Response",
        "properties": {
          "changed": {
            "description": "When Aggregate was created",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "created": {
            "description": "When Aggregate was created",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "data": {
            "additionalProperties": true,
            "description": "Aggregate Root Data",
            "readOnly": true,
            "type": "object"
          },
          "deleted": {
            "description": "When Aggregate was created",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "number": {
            "description": "Last event applied to aggregate (can be used as version)",
            "readOnly": true,
            "type": "integer"
          },
          "type": {
            "description": "Aggregate Root Type",
            "readOnly": true,
            "type": "string"
          }
        },
        "readOnly": true,
        "type": "object"
      },
      "AppConfig": {
        "additionalProperties": false,
        "description": "SarSys application configuration",
        "properties": {
          "activityRecognition": {
            "default": false,
            "description": "Activity recognition access is granted",
            "type": "boolean"
          },
          "callsignReuse": {
            "default": true,
            "description": "Reuse callsigns for retired units",
            "type": "boolean"
          },
          "demo": {
            "default": true,
            "description": "Use demo-mode (no real data and any login)",
            "type": "boolean"
          },
          "demoRole": {
            "default": "commander",
            "description": "Role of logged in user in demo-mode",
            "enum": [
              "oversight",
              "commander",
              "unit_leader",
              "personnel"
            ],
            "type": "string"
          },
          "firstSetup": {
            "default": true,
            "description": "Show first setup before next login",
            "type": "boolean"
          },
          "idpHints": {
            "default": [
              "google"
            ],
            "description": "List of idp hints",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "keepScreenOn": {
            "default": false,
            "description": "Keep screen on when maps are displayed",
            "type": "boolean"
          },
          "locationAccuracy": {
            "default": "high",
            "description": "Requested location accuracy",
            "enum": [
              "lowest",
              "low",
              "medium",
              "high",
              "best",
              "navigation",
              "automatic"
            ],
            "type": "string"
          },
          "locationAllowSharing": {
            "default": true,
            "description": "Share locations with operation when personnel",
            "type": "boolean"
          },
          "locationAlways": {
            "default": false,
            "description": "Location access always is is granted",
            "type": "boolean"
          },
          "locationFastestInterval": {
            "default": 1000,
            "description": "Fastest interval between location updates in milliseconds",
            "type": "integer"
          },
          "locationSmallestDisplacement": {
            "default": 3,
            "description": "Smallest displacment in meters before update is received",
            "type": "integer"
          },
          "locationStoreLocally": {
            "default": true,
            "description": "Store locations locally",
            "type": "boolean"
          },
          "locationWhenInUse": {
            "default": false,
            "description": "Location access when app is in use is granted",
            "type": "boolean"
          },
          "mapCacheCapacity": {
            "default": 15000,
            "description": "Maximum number map tiles cached locally",
            "type": "integer"
          },
          "mapCacheTTL": {
            "default": 30,
            "description": "Number of days downloaded map tiles are cached locally",
            "type": "integer"
          },
          "mapRetinaMode": {
            "default": false,
            "description": "Show high resolution maps is possible",
            "type": "boolean"
          },
          "onboarded": {
            "default": true,
            "description": "Show onboarding before next login",
            "type": "boolean"
          },
          "securityLockAfter": {
            "default": 2700,
            "description": "Lock idle device (no user interactions) after in given number of seconds",
            "type": "integer"
          },
          "securityMode": {
            "description": "Security mode applied to application",
            "enum": [
              "personal",
              "shared"
            ],
            "type": "string"
          },
          "securityPin": {
            "description": "Security pin",
            "type": "string"
          },
          "securityType": {
            "description": "Security type",
            "enum": [
              "pin",
              "fingerprint"
            ],
            "type": "string"
          },
          "sentryDns": {
            "default": "https://2d6130375010466b9652b9e9efc415cc@sentry.io/1523681",
            "description": "Sentry DNS for remote error reporting",
            "format": "uri",
            "type": "string"
          },
          "storage": {
            "default": false,
            "description": "Storage access is granted",
            "type": "boolean"
          },
          "talkGroupCatalog": {
            "default": "Oslo",
            "description": "Default talk group catalog name",
            "type": "string"
          },
          "talkGroups": {
            "default": [
              "Oslo"
            ],
            "description": "List of default talk group names",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "trustedDomains": {
            "default": [
              "rodekors.org",
              "discoos.org"
            ],
            "description": "List of trusted domains",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "udid": {
            "description": "Unique device id, typically [ANDROID_ID] for Android and [identifierForVendor] for iOS platforms",
            "format": "uuid",
            "type": "string"
          },
          "units": {
            "description": "List of templates for units to create automatically when opening an new operation",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "uuid": {
            "description": "Unique application configuration id",
            "format": "uuid",
            "type": "string"
          },
          "version": {
            "default": 1,
            "description": "AppConfig version for backwards compatibility",
            "type": "integer"
          }
        },
        "required": [
          "uuid"
        ],
        "type": "object"
      },
      "Author": {
        "additionalProperties": false,
        "description": "Pass codes for access rights to spesific Incident instance",
        "properties": {
          "timestamp": {
            "description": "When modification occurred",
            "format": "date-time",
            "type": "string"
          },
          "userId": {
            "description": "Author user id",
            "type": "string"
          }
        },
        "required": [
          "userId",
          "timestamp"
        ],
        "type": "object"
      },
      "Circle": {
        "additionalProperties": false,
        "description": "Circle feature described by a GeoJSON point in center and a radius as an property",
        "properties": {
          "geometry": {
            "$ref": "#/components/schemas/Point"
          },
          "properties": {
            "properties": {
              "description": {
                "description": "Feature description",
                "type": "string"
              },
              "name": {
                "description": "Feature name",
                "type": "string"
              },
              "radius": {
                "description": "Circle radius i meters",
                "type": "number"
              }
            },
            "type": "object"
          },
          "type": {
            "additionalProperties": false,
            "description": "GeoJSON Feature type",
            "enum": [
              "Feature"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Clue": {
        "additionalProperties": false,
        "description": "Clue Response",
        "properties": {
          "description": {
            "description": "Clue description",
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "name": {
            "description": "Clue name",
            "type": "string"
          },
          "quality": {
            "additionalProperties": false,
            "description": "Clue quality assessment",
            "enum": [
              "confirmed",
              "plausable",
              "possible",
              "unlikely",
              "rejected"
            ],
            "type": "string"
          },
          "type": {
            "additionalProperties": false,
            "description": "Clue type",
            "enum": [
              "find",
              "condition",
              "observation",
              "circumstance"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "quality"
        ],
        "type": "object"
      },
      "Coordinates": {
        "additionalProperties": false,
        "description": "GeoJSON coordinate. There MUST be two or more elements. The first two elements are longitude and latitude, or easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
        "items": {
          "type": "number"
        },
        "maxItems": 3,
        "minItems": 2,
        "type": "array"
      },
      "Department": {
        "additionalProperties": false,
        "description": "Department Schema (aggregate root)",
        "properties": {
          "active": {
            "description": "Department status",
            "type": "boolean"
          },
          "division": {
            "additionalProperties": false,
            "properties": {
              "uuid": {
                "$ref": "#/components/schemas/UUID"
              }
            },
            "readOnly": true,
            "type": "object"
          },
          "name": {
            "description": "Department name",
            "type": "string"
          },
          "suffix": {
            "description": "FleetMap suffix number",
            "type": "string"
          },
          "uuid": {
            "$ref": "#/components/schemas/UUID"
          }
        },
        "required": [
          "uuid"
        ],
        "type": "object"
      },
      "Device": {
        "additionalProperties": false,
        "description": "Device Schema (aggregate root)",
        "properties": {
          "alias": {
            "description": "Device alias",
            "type": "string"
          },
          "allocatedTo": {
            "additionalProperties": false,
            "description": "Operation which device is allocated to",
            "properties": {
              "type": {
                "default": "Operation",
                "description": "Operation Type",
                "readOnly": true,
                "type": "string"
              },
              "uuid": {
                "description": "Operation UUID",
                "format": "uuid",
                "readOnly": true,
                "type": "string"
              }
            },
            "readOnly": true,
            "required": [
              "uuid"
            ],
            "type": "object"
          },
          "manual": {
            "default": true,
            "description": "Device registered manually",
            "type": "boolean"
          },
          "messages": {
            "description": "List of messages added to Device",
            "items": {
              "$ref": "#/components/schemas/Message"
            },
            "readOnly": true,
            "type": "array"
          },
          "network": {
            "description": "Device network name",
            "type": "string"
          },
          "networkId": {
            "description": "Device identifier on network",
            "type": "string"
          },
          "number": {
            "description": "Device number",
            "type": "string"
          },
          "position": {
            "additionalProperties": false,
            "description": "Current position",
            "properties": {
              "geometry": {
                "$ref": "#/components/schemas/Point"
              },
              "properties": {
                "properties": {
                  "accuracy": {
                    "description": "Position accuracy",
                    "type": "number"
                  },
                  "activity": {
                    "additionalProperties": false,
                    "description": "Activity Value Object",
                    "properties": {
                      "confidence": {
                        "additionalProperties": false,
                        "default": "100",
                        "description": "Activity type confidence (0-100%)",
                        "type": "integer"
                      },
                      "type": {
                        "additionalProperties": false,
                        "default": "unknown",
                        "description": "Activity tyep",
                        "enum": [
                          "still",
                          "on_foot",
                          "walking",
                          "running",
                          "unknown",
                          "on_bicycle",
                          "in_vehicle"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "bearing": {
                    "description": "Bearing at given position in degrees",
                    "type": "number"
                  },
                  "description": {
                    "description": "Feature description",
                    "type": "string"
                  },
                  "name": {
                    "description": "Feature name",
                    "type": "string"
                  },
                  "source": {
                    "additionalProperties": false,
                    "default": "manual",
                    "description": "Position source",
                    "enum": [
                      "manual",
                      "device",
                      "aggregate"
                    ],
                    "type": "string"
                  },
                  "speed": {
                    "description": "Speed at given position in meter/seconds",
                    "type": "number"
                  },
                  "timestamp": {
                    "description": "Timestamp in ISO8601 Date Time String Format",
                    "format": "date-time",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": {
                "additionalProperties": false,
                "description": "GeoJSON Feature type",
                "enum": [
                  "Feature"
                ],
                "type": "string"
              }
            },
            "readOnly": true,
            "type": "object"
          },
          "status": {
            "additionalProperties": false,
            "default": "unavailable",
            "description": "Device status",
            "enum": [
              "available",
              "unavailable"
            ],
            "readOnly": true,
            "type": "string"
          },
          "trackable": {
            "default": true,
            "description": "Must be true for tracking",
            "type": "boolean"
          },
          "transitions": {
            "description": "State transitions (read only)",
            "items": {
              "additionalProperties": false,
              "properties": {
                "status": {
                  "additionalProperties": false,
                  "default": "unavailable",
                  "description": "Device status",
                  "enum": [
                    "available",
                    "unavailable"
                  ],
                  "readOnly": true,
                  "type": "string"
                },
                "timestamp": {
                  "description": "When transition occured",
                  "format": "date-time",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "readOnly": true,
            "type": "array"
          },
          "type": {
            "additionalProperties": false,
            "description": "Device type",
            "enum": [
              "tetra",
              "app",
              "aprs",
              "ais",
              "spot",
              "inreach"
            ],
            "type": "string"
          },
          "uuid": {
            "$ref": "#/components/schemas/UUID"
          }
        },
        "required": [
          "uuid"
        ],
        "type": "object"
      },
      "Division": {
        "additionalProperties": false,
        "description": "Division Schema (aggregate root)",
        "properties": {
          "active": {
            "description": "Division status",
            "type": "boolean"
          },
          "departments": {
            "description": "List of unique department uuids",
            "items": {
              "$ref": "#/components/schemas/UUID"
            },
            "type": "array"
          },
          "name": {
            "description": "Division name",
            "type": "string"
          },
          "organisation": {
            "additionalProperties": false,
            "properties": {
              "uuid": {
                "$ref": "#/components/schemas/UUID"
              }
            },
            "readOnly": true,
            "type": "object"
          },
          "suffix": {
            "description": "FleetMap suffix number",
            "type": "string"
          },
          "uuid": {
            "$ref": "#/components/schemas/UUID"
          }
        },
        "required": [
          "uuid"
        ],
        "type": "object"
      },
      "DivisionTree": {
        "description": "List of OrganisationTree",
        "properties": {
          "divisions": {
            "items": {
              "$ref": "#/components/schemas/OrganisationTree"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EntityPageResponse": {
        "description": "Entities Response",
        "properties": {
          "aggregate": {
            "$ref": "#/components/schemas/AggregateRef"
          },
          "entries": {
            "description": "Array of Entity Objects",
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "readOnly": true,
            "type": "array"
          },
          "limit": {
            "description": "null Page size",
            "readOnly": true,
            "type": "integer"
          },
          "next": {
            "description": "Next null Page offset",
            "readOnly": true,
            "type": "integer"
          },
          "offset": {
            "description": "null Page offset",
            "readOnly": true,
            "type": "integer"
          },
          "path": {
            "description": "Path to Entity Object List",
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "description": "Number of entities",
            "readOnly": true,
            "type": "integer"
          },
          "type": {
            "description": "Entity Object Type",
            "readOnly": true,
            "type": "string"
          }
        },
        "readOnly": true,
        "type": "object"
      },
      "EntityResponse": {
        "description": "Entity Object Response",
        "properties": {
          "aggregate": {
            "$ref": "#/components/schemas/AggregateRef"
          },
          "data": {
            "additionalProperties": true,
            "description": "Entity Object  Data",
            "readOnly": true,
            "type": "object"
          },
          "number": {
            "description": "Last event applied to aggregate (can be used as version)",
            "readOnly": true,
            "type": "integer"
          },
          "type": {
            "description": "Entity Object Type",
            "readOnly": true,
            "type": "string"
          }
        },
        "readOnly": true,
        "type": "object"
      },
      "Feature": {
        "additionalProperties": false,
        "description": "GeoJSON Feature",
        "properties": {
          "geometry": {
            "additionalProperties": false,
            "description": "GeoJSon geometry",
            "properties": {
              "type": {
                "additionalProperties": false,
                "description": "GeoJSON Geometry type",
                "enum": [
                  "Point",
                  "LineString",
                  "Polygon",
                  "MultiPoint",
                  "MultiLineString",
                  "MultiPolygon"
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "properties": {
            "properties": {
              "description": {
                "description": "Feature description",
                "type": "string"
              },
              "name": {
                "description": "Feature name",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": {
            "additionalProperties": false,
            "description": "GeoJSON Feature type",
            "enum": [
              "Feature"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "FeatureCollection": {
        "description": "GeoJSON FeatureCollection",
        "properties": {
          "features": {
            "items": {
              "additionalProperties": false,
              "description": "GeoJSON Feature",
              "properties": {
                "geometry": {
                  "additionalProperties": false,
                  "description": "GeoJSon geometry",
                  "properties": {
                    "type": {
                      "additionalProperties": false,
                      "description": "GeoJSON Geometry type",
                      "enum": [
                        "Point",
                        "LineString",
                        "Polygon",
                        "MultiPoint",
                        "MultiLineString",
                        "MultiPolygon"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "properties": {
                  "properties": {
                    "description": {
                      "description": "Feature description",
                      "type": "string"
                    },
                    "name": {
                      "description": "Feature name",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "additionalProperties": false,
                  "description": "GeoJSON Feature type",
                  "enum": [
                    "Feature"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "type": {
            "additionalProperties": false,
            "description": "GeoJSON Feature type",
            "enum": [
              "FeatureCollection"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Geometry": {
        "additionalProperties": false,
        "description": "GeoJSon geometry",
        "properties": {
          "type": {
            "additionalProperties": false,
            "description": "GeoJSON Geometry type",
            "enum": [
              "Point",
              "LineString",
              "Polygon",
              "MultiPoint",
              "MultiLineString",
              "MultiPolygon"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "GeometryCollection": {
        "description": "GeoJSON GeometryCollection",
        "properties": {
          "geometries": {
            "items": {
              "additionalProperties": false,
              "description": "GeoJSon geometry",
              "properties": {
                "type": {
                  "additionalProperties": false,
                  "description": "GeoJSON Geometry type",
                  "enum": [
                    "Point",
                    "LineString",
                    "Polygon",
                    "MultiPoint",
                    "MultiLineString",
                    "MultiPolygon"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "type": {
            "additionalProperties": false,
            "description": "GeoJSON Geometry type",
            "enum": [
              "GeometryCollection"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ID": {
        "description": "An id unique in current collection",
        "type": "string"
      },
      "Incident": {
        "additionalProperties": false,
        "properties": {
          "clues": {
            "description": "List of Clues for planning and response",
            "items": {
              "$ref": "#/components/schemas/Clue"
            },
            "readOnly": true,
            "type": "array"
          },
          "exercise": {
            "description": "Exercise flag",
            "type": "boolean"
          },
          "messages": {
            "description": "List of messages added to Incident",
            "items": {
              "$ref": "#/components/schemas/Message"
            },
            "readOnly": true,
            "type": "array"
          },
          "name": {
            "description": "Name of incident scene",
            "type": "string"
          },
          "occurred": {
            "description": "When Incident occurred",
            "format": "date-time",
            "type": "string"
          },
          "operations": {
            "description": "List of uuids of Operations responding to this Incident",
            "items": {
              "$ref": "#/components/schemas/UUID"
            },
            "readOnly": true,
            "type": "array"
          },
          "resolution": {
            "additionalProperties": false,
            "default": "unresolved",
            "description": "Incident resolution",
            "enum": [
              "unresolved",
              "cancelled",
              "duplicate",
              "resolved"
            ],
            "type": "string"
          },
          "status": {
            "additionalProperties": false,
            "default": "registered",
            "description": "Incident status",
            "enum": [
              "registered",
              "handling",
              "closed"
            ],
            "type": "string"
          },
          "subjects": {
            "description": "List of uuids of Subjects impacted by this Incident",
            "items": {
              "$ref": "#/components/schemas/UUID"
            },
            "readOnly": true,
            "type": "array"
          },
          "summary": {
            "description": "Situation summary",
            "type": "string"
          },
          "transitions": {
            "description": "State transitions (read only)",
            "items": {
              "additionalProperties": false,
              "properties": {
                "resolution": {
                  "additionalProperties": false,
                  "default": "unresolved",
                  "description": "Incident resolution",
                  "enum": [
                    "unresolved",
                    "cancelled",
                    "duplicate",
                    "resolved"
                  ],
                  "type": "string"
                },
                "status": {
                  "additionalProperties": false,
                  "default": "registered",
                  "description": "Incident status",
                  "enum": [
                    "registered",
                    "handling",
                    "closed"
                  ],
                  "type": "string"
                },
                "timestamp": {
                  "description": "When transition occurred",
                  "format": "date-time",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "readOnly": true,
            "type": "array"
          },
          "type": {
            "additionalProperties": false,
            "description": "Incident type",
            "enum": [
              "lost",
              "distress",
              "disaster",
              "other"
            ],
            "type": "string"
          },
          "uuid": {
            "$ref": "#/components/schemas/UUID"
          }
        },
        "required": [
          "uuid",
          "name",
          "summary",
          "type",
          "occurred"
        ],
        "type": "object"
      },
      "LineString": {
        "additionalProperties": false,
        "description": "GeoJSON LineString",
        "properties": {
          "coordinates": {
            "items": {
              "$ref": "#/components/schemas/Coordinates"
            },
            "type": "array"
          },
          "type": {
            "additionalProperties": false,
            "description": "GeoJSON Geometry type",
            "enum": [
              "LineString"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Location": {
        "additionalProperties": false,
        "description": "Location Schema (value object)",
        "properties": {
          "address": {
            "additionalProperties": false,
            "description": "Location address",
            "properties": {
              "city": {
                "description": "City name",
                "type": "string"
              },
              "countryCode": {
                "description": "ISO 3166 country code",
                "type": "string"
              },
              "lines": {
                "description": "Pass codes for authorizing access to Operation data",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "postalCode": {
                "description": "Postal, state or zip code",
                "type": "string"
              }
            },
            "type": "object"
          },
          "description": {
            "description": "Location description",
            "type": "string"
          },
          "point": {
            "additionalProperties": false,
            "description": "Location point",
            "properties": {
              "coordinates": {
                "$ref": "#/components/schemas/Coordinates"
              },
              "type": {
                "additionalProperties": false,
                "description": "GeoJSON Geometry type",
                "enum": [
                  "Point"
                ],
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "point"
        ],
        "type": "object"
      },
      "Message": {
        "description": "GeoJSON FeatureCollection",
        "properties": {
          "body": {
            "additionalProperties": true,
            "description": "Message body",
            "type": "object"
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "subject": {
            "description": "Message subject",
            "type": "string"
          },
          "type": {
            "additionalProperties": false,
            "description": "Message type",
            "enum": [
              "clue",
              "general",
              "objective",
              "personnel",
              "device",
              "subject",
              "unit"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Mission": {
        "additionalProperties": false,
        "properties": {
          "assignedTo": {
            "additionalProperties": false,
            "description": "Unit assigned to this mission",
            "properties": {
              "type": {
                "default": "Unit",
                "description": "Unit Type",
                "readOnly": true,
                "type": "string"
              },
              "uuid": {
                "description": "Unit UUID",
                "format": "uuid",
                "readOnly": true,
                "type": "string"
              }
            },
            "readOnly": true,
            "required": [
              "uuid"
            ],
            "type": "object"
          },
          "description": {
            "description": "Mission description",
            "type": "string"
          },
          "messages": {
            "description": "List of messages added to Mission",
            "items": {
              "$ref": "#/components/schemas/Message"
            },
            "readOnly": true,
            "type": "array"
          },
          "operation": {
            "additionalProperties": false,
            "properties": {
              "uuid": {
                "$ref": "#/components/schemas/UUID"
              }
            },
            "readOnly": true,
            "type": "object"
          },
          "parts": {
            "description": "Points, linestrings, rectangles and circles describing mission parts",
            "items": {
              "$ref": "#/components/schemas/MissionPart"
            },
            "readOnly": true,
            "type": "array"
          },
          "priority": {
            "additionalProperties": false,
            "default": "medium",
            "description": "Mission priority",
            "enum": [
              "highest",
              "high",
              "medium",
              "low",
              "lowest"
            ],
            "type": "string"
          },
          "resolution": {
            "additionalProperties": false,
            "default": "unresolved",
            "description": "Mission status",
            "enum": [
              "unresolved",
              "cancelled",
              "duplicate",
              "resolved"
            ],
            "type": "string"
          },
          "results": {
            "description": "Points, linestrings, rectangles and circles describing the results",
            "items": {
              "$ref": "#/components/schemas/MissionResult"
            },
            "readOnly": true,
            "type": "array"
          },
          "status": {
            "additionalProperties": false,
            "default": "created",
            "description": "Mission status",
            "enum": [
              "created",
              "planned",
              "assigned",
              "inprogress",
              "completed"
            ],
            "type": "string"
          },
          "transitions": {
            "description": "State transitions (read only)",
            "items": {
              "additionalProperties": false,
              "items": {
                "properties": {
                  "resolution": {
                    "additionalProperties": false,
                    "default": "unresolved",
                    "description": "Mission status",
                    "enum": [
                      "unresolved",
                      "cancelled",
                      "duplicate",
                      "resolved"
                    ],
                    "type": "string"
                  },
                  "status": {
                    "additionalProperties": false,
                    "default": "created",
                    "description": "Mission status",
                    "enum": [
                      "created",
                      "planned",
                      "assigned",
                      "inprogress",
                      "completed"
                    ],
                    "type": "string"
                  },
                  "timestamp": {
                    "description": "When transition occured",
                    "format": "date-time",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "readOnly": true,
            "type": "array"
          },
          "type": {
            "additionalProperties": false,
            "description": "Mission type",
            "enum": [
              "search",
              "rescue",
              "other"
            ],
            "type": "string"
          },
          "uuid": {
            "$ref": "#/components/schemas/UUID"
          }
        },
        "required": [
          "uuid",
          "type"
        ],
        "type": "object"
      },
      "MissionPart": {
        "additionalProperties": false,
        "description": "MissionPart Response",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/FeatureCollection"
          },
          "description": {
            "description": "Mission part description",
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "name": {
            "description": "Mission part name",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "MissionResult": {
        "additionalProperties": false,
        "description": "MissionResult Response",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/FeatureCollection"
          },
          "description": {
            "description": "Mission result description",
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "name": {
            "description": "Mission result name",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "MultiLineString": {
        "additionalProperties": false,
        "description": "GeoJSON MultiLineString",
        "properties": {
          "coordinates": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/Coordinates"
              },
              "type": "array"
            },
            "type": "array"
          },
          "type": {
            "additionalProperties": false,
            "description": "GeoJSON Geometry type",
            "enum": [
              "MultiLineString"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "MultiPoint": {
        "additionalProperties": false,
        "description": "GeoJSON MultiPoint",
        "properties": {
          "coordinates": {
            "items": {
              "additionalProperties": false,
              "description": "GeoJSON coordinate. There MUST be two or more elements. The first two elements are longitude and latitude, or easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
              "items": {
                "type": "number"
              },
              "maxItems": 3,
              "minItems": 2,
              "type": "array"
            },
            "type": "array"
          },
          "type": {
            "additionalProperties": false,
            "description": "GeoJSON Geometry type",
            "enum": [
              "MultiPoint"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "MultiPolygon": {
        "additionalProperties": false,
        "description": "GeoJSON MultiPolygon",
        "properties": {
          "coordinates": {
            "items": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/Coordinates"
                },
                "type": "array"
              },
              "type": "array"
            },
            "type": "array"
          },
          "type": {
            "additionalProperties": false,
            "description": "GeoJSON Geometry type",
            "enum": [
              "MultiPolygon"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Objective": {
        "additionalProperties": false,
        "description": "Objective Response",
        "properties": {
          "description": {
            "description": "Objective description",
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "location": {
            "description": "Rescue or assitance location",
            "items": {
              "$ref": "#/components/schemas/Location"
            },
            "type": "array"
          },
          "name": {
            "description": "Objective name",
            "type": "string"
          },
          "resolution": {
            "additionalProperties": false,
            "default": "unresolved",
            "description": "Objective resolution",
            "enum": [
              "unresolved",
              "cancelled",
              "duplicate",
              "resolved"
            ],
            "type": "string"
          },
          "type": {
            "description": "Objective type",
            "enum": [
              "locate",
              "rescue",
              "assist"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "type",
          "resolution"
        ],
        "type": "object"
      },
      "Operation": {
        "additionalProperties": false,
        "properties": {
          "author": {
            "additionalProperties": false,
            "description": "Pass codes for access rights to spesific Incident instance",
            "properties": {
              "timestamp": {
                "description": "When modification occurred",
                "format": "date-time",
                "type": "string"
              },
              "userId": {
                "description": "Author user id",
                "type": "string"
              }
            },
            "required": [
              "userId",
              "timestamp"
            ],
            "type": "object"
          },
          "commander": {
            "description": "Reference to personnel in command",
            "properties": {
              "uuid": {
                "$ref": "#/components/schemas/UUID"
              }
            },
            "type": "object"
          },
          "incident": {
            "additionalProperties": false,
            "properties": {
              "uuid": {
                "$ref": "#/components/schemas/UUID"
              }
            },
            "readOnly": true,
            "type": "object"
          },
          "ipp": {
            "additionalProperties": false,
            "description": "Initial planning point",
            "properties": {
              "address": {
                "additionalProperties": false,
                "description": "Location address",
                "properties": {
                  "city": {
                    "description": "City name",
                    "type": "string"
                  },
                  "countryCode": {
                    "description": "ISO 3166 country code",
                    "type": "string"
                  },
                  "lines": {
                    "description": "Pass codes for authorizing access to Operation data",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "postalCode": {
                    "description": "Postal, state or zip code",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "description": {
                "description": "Location description",
                "type": "string"
              },
              "point": {
                "additionalProperties": false,
                "description": "Location point",
                "properties": {
                  "coordinates": {
                    "$ref": "#/components/schemas/Coordinates"
                  },
                  "type": {
                    "additionalProperties": false,
                    "description": "GeoJSON Geometry type",
                    "enum": [
                      "Point"
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "required": [
              "point"
            ],
            "type": "object"
          },
          "justification": {
            "description": "Justification for responding",
            "type": "string"
          },
          "meetup": {
            "additionalProperties": false,
            "description": "On scene meeting point",
            "properties": {
              "address": {
                "additionalProperties": false,
                "description": "Location address",
                "properties": {
                  "city": {
                    "description": "City name",
                    "type": "string"
                  },
                  "countryCode": {
                    "description": "ISO 3166 country code",
                    "type": "string"
                  },
                  "lines": {
                    "description": "Pass codes for authorizing access to Operation data",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "postalCode": {
                    "description": "Postal, state or zip code",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "description": {
                "description": "Location description",
                "type": "string"
              },
              "point": {
                "additionalProperties": false,
                "description": "Location point",
                "properties": {
                  "coordinates": {
                    "$ref": "#/components/schemas/Coordinates"
                  },
                  "type": {
                    "additionalProperties": false,
                    "description": "GeoJSON Geometry type",
                    "enum": [
                      "Point"
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "required": [
              "point"
            ],
            "type": "object"
          },
          "messages": {
            "description": "List of messages added to Operation",
            "items": {
              "$ref": "#/components/schemas/Message"
            },
            "readOnly": true,
            "type": "array"
          },
          "missions": {
            "description": "List of uuid of Missions executed by this operation",
            "items": {
              "$ref": "#/components/schemas/UUID"
            },
            "readOnly": true,
            "type": "array"
          },
          "name": {
            "description": "Name of operation scene",
            "type": "string"
          },
          "objectives": {
            "description": "List of Operation objectives",
            "items": {
              "$ref": "#/components/schemas/Objective"
            },
            "readOnly": true,
            "type": "array"
          },
          "passcodes": {
            "additionalProperties": false,
            "description": "Passcodes for Operation access rights",
            "properties": {
              "commander": {
                "description": "Passcode for access with Commander rights",
                "type": "string"
              },
              "personnel": {
                "description": "Passcode for access with Personnel rights",
                "type": "string"
              }
            },
            "required": [
              "commander",
              "personnel"
            ],
            "type": "object"
          },
          "personnels": {
            "description": "List of uuid of Personnels mobilized for this operation",
            "items": {
              "$ref": "#/components/schemas/UUID"
            },
            "readOnly": true,
            "type": "array"
          },
          "reference": {
            "description": "External reference from requesting authority",
            "type": "string"
          },
          "resolution": {
            "additionalProperties": false,
            "default": "unresolved",
            "description": "Operation resolution",
            "enum": [
              "unresolved",
              "cancelled",
              "duplicate",
              "resolved"
            ],
            "type": "string"
          },
          "status": {
            "additionalProperties": false,
            "default": "planned",
            "description": "Operation status",
            "enum": [
              "planned",
              "enroute",
              "onscene",
              "completed"
            ],
            "type": "string"
          },
          "talkgroups": {
            "description": "List of talk gropus in use",
            "items": {
              "$ref": "#/components/schemas/TalkGroup"
            },
            "type": "array"
          },
          "transitions": {
            "description": "State transitions (read only)",
            "items": {
              "additionalProperties": false,
              "properties": {
                "resolution": {
                  "additionalProperties": false,
                  "default": "unresolved",
                  "description": "Operation resolution",
                  "enum": [
                    "unresolved",
                    "cancelled",
                    "duplicate",
                    "resolved"
                  ],
                  "type": "string"
                },
                "status": {
                  "additionalProperties": false,
                  "default": "planned",
                  "description": "Operation status",
                  "enum": [
                    "planned",
                    "enroute",
                    "onscene",
                    "completed"
                  ],
                  "type": "string"
                },
                "timestamp": {
                  "description": "When transition occured",
                  "format": "date-time",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "readOnly": true,
            "type": "array"
          },
          "type": {
            "additionalProperties": false,
            "description": "Operation type",
            "enum": [
              "search",
              "rescue",
              "other"
            ],
            "type": "string"
          },
          "units": {
            "description": "List of uuid of Units mobilized for this operation",
            "items": {
              "$ref": "#/components/schemas/UUID"
            },
            "readOnly": true,
            "type": "array"
          },
          "uuid": {
            "$ref": "#/components/schemas/UUID"
          }
        },
        "required": [
          "uuid"
        ],
        "type": "object"
      },
      "Organisation": {
        "additionalProperties": false,
        "description": "Organisation Schema (aggregate root)",
        "properties": {
          "active": {
            "description": "Organisation status",
            "type": "boolean"
          },
          "divisions": {
            "description": "List of division uuids",
            "items": {
              "$ref": "#/components/schemas/UUID"
            },
            "type": "array"
          },
          "name": {
            "description": "Organisation name",
            "type": "string"
          },
          "prefix": {
            "description": "FleetMap prefix number",
            "type": "string"
          },
          "uuid": {
            "$ref": "#/components/schemas/UUID"
          }
        },
        "required": [
          "uuid"
        ],
        "type": "object"
      },
      "OrganisationTree": {
        "properties": {
          "active": {
            "description": "Division status",
            "type": "boolean"
          },
          "departments": {
            "description": "List of Department",
            "items": {
              "additionalProperties": false,
              "description": "Department Schema (aggregate root)",
              "properties": {
                "active": {
                  "description": "Department status",
                  "type": "boolean"
                },
                "name": {
                  "description": "Department name",
                  "type": "string"
                },
                "suffix": {
                  "description": "FleetMap number suffix",
                  "type": "string"
                },
                "uuid": {
                  "$ref": "#/components/schemas/UUID"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "name": {
            "description": "Division name",
            "type": "string"
          },
          "suffix": {
            "description": "FleetMap number suffix",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PassCodes": {
        "additionalProperties": false,
        "description": "Passcodes for Operation access rights",
        "properties": {
          "commander": {
            "description": "Passcode for access with Commander rights",
            "type": "string"
          },
          "personnel": {
            "description": "Passcode for access with Personnel rights",
            "type": "string"
          }
        },
        "required": [
          "commander",
          "personnel"
        ],
        "type": "object"
      },
      "Person": {
        "additionalProperties": false,
        "properties": {
          "email": {
            "description": "E-mail address",
            "type": "string"
          },
          "fname": {
            "description": "First name",
            "type": "string"
          },
          "lname": {
            "description": "Last name",
            "type": "string"
          },
          "phone": {
            "description": "Phone number",
            "type": "string"
          },
          "temporary": {
            "description": "Temporary person",
            "type": "boolean"
          },
          "userId": {
            "description": "Authenticated used id",
            "type": "string"
          },
          "uuid": {
            "$ref": "#/components/schemas/UUID"
          }
        },
        "required": [
          "uuid"
        ],
        "type": "object"
      },
      "Personnel": {
        "additionalProperties": false,
        "properties": {
          "affiliation": {
            "additionalProperties": false,
            "description": "Affiliation reference for PII lookup",
            "properties": {
              "type": {
                "default": "Affiliation",
                "description": "Affiliation Type",
                "readOnly": true,
                "type": "string"
              },
              "uuid": {
                "description": "Affiliation UUID",
                "format": "uuid",
                "readOnly": true,
                "type": "string"
              }
            },
            "readOnly": true,
            "required": [
              "uuid"
            ],
            "type": "object"
          },
          "function": {
            "additionalProperties": false,
            "default": "personnel",
            "description": "Personnel function",
            "enum": [
              "personnel",
              "commander",
              "unit_leader"
            ],
            "type": "string"
          },
          "messages": {
            "description": "List of messages added to Personnel",
            "items": {
              "$ref": "#/components/schemas/Message"
            },
            "readOnly": true,
            "type": "array"
          },
          "operation": {
            "additionalProperties": false,
            "description": "Operation which this personnel is allocated to",
            "properties": {
              "type": {
                "default": "Operation",
                "description": "Operation Type",
                "readOnly": true,
                "type": "string"
              },
              "uuid": {
                "description": "Operation UUID",
                "format": "uuid",
                "readOnly": true,
                "type": "string"
              }
            },
            "readOnly": true,
            "required": [
              "uuid"
            ],
            "type": "object"
          },
          "status": {
            "additionalProperties": false,
            "default": "alerted",
            "description": "Personnel status",
            "enum": [
              "none",
              "alerted",
              "enroute",
              "onscene",
              "leaving",
              "retired"
            ],
            "type": "string"
          },
          "tracking": {
            "additionalProperties": false,
            "description": "Unique id of tracking object created for this personnel. Only writable on creation.",
            "properties": {
              "type": {
                "default": "Tracking",
                "description": "Tracking Type",
                "readOnly": true,
                "type": "string"
              },
              "uuid": {
                "description": "Tracking UUID",
                "format": "uuid",
                "readOnly": true,
                "type": "string"
              }
            },
            "readOnly": true,
            "required": [
              "uuid"
            ],
            "type": "object"
          },
          "transitions": {
            "description": "State transitions (read only)",
            "items": {
              "additionalProperties": false,
              "properties": {
                "status": {
                  "additionalProperties": false,
                  "default": "alerted",
                  "description": "Personnel status",
                  "enum": [
                    "none",
                    "alerted",
                    "enroute",
                    "onscene",
                    "leaving",
                    "retired"
                  ],
                  "type": "string"
                },
                "timestamp": {
                  "description": "When transition occurred",
                  "format": "date-time",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "readOnly": true,
            "type": "array"
          },
          "unit": {
            "additionalProperties": false,
            "description": "Unit which this personnel is assigned to",
            "properties": {
              "type": {
                "default": "Unit",
                "description": "Unit Type",
                "readOnly": true,
                "type": "string"
              },
              "uuid": {
                "description": "Unit UUID",
                "format": "uuid",
                "readOnly": true,
                "type": "string"
              }
            },
            "readOnly": true,
            "required": [
              "uuid"
            ],
            "type": "object"
          },
          "uuid": {
            "$ref": "#/components/schemas/UUID"
          }
        },
        "required": [
          "uuid",
          "affiliation"
        ],
        "type": "object"
      },
      "Point": {
        "additionalProperties": false,
        "description": "GeoJSON Point",
        "properties": {
          "coordinates": {
            "$ref": "#/components/schemas/Coordinates"
          },
          "type": {
            "additionalProperties": false,
            "description": "GeoJSON Geometry type",
            "enum": [
              "Point"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Polygon": {
        "additionalProperties": false,
        "description": "GeoJSON Polygon",
        "properties": {
          "coordinates": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/Coordinates"
              },
              "type": "array"
            },
            "type": "array"
          },
          "type": {
            "additionalProperties": false,
            "description": "GeoJSON Geometry type",
            "enum": [
              "Polygon"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Position": {
        "additionalProperties": false,
        "description": "Position feature described by a GeoJSON point with accuracy, point type and timestamp",
        "properties": {
          "geometry": {
            "$ref": "#/components/schemas/Point"
          },
          "properties": {
            "properties": {
              "accuracy": {
                "description": "Position accuracy",
                "type": "number"
              },
              "activity": {
                "additionalProperties": false,
                "description": "Activity Value Object",
                "properties": {
                  "confidence": {
                    "additionalProperties": false,
                    "default": "100",
                    "description": "Activity type confidence (0-100%)",
                    "type": "integer"
                  },
                  "type": {
                    "additionalProperties": false,
                    "default": "unknown",
                    "description": "Activity tyep",
                    "enum": [
                      "still",
                      "on_foot",
                      "walking",
                      "running",
                      "unknown",
                      "on_bicycle",
                      "in_vehicle"
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "bearing": {
                "description": "Bearing at given position in degrees",
                "type": "number"
              },
              "description": {
                "description": "Feature description",
                "type": "string"
              },
              "name": {
                "description": "Feature name",
                "type": "string"
              },
              "source": {
                "additionalProperties": false,
                "default": "manual",
                "description": "Position source",
                "enum": [
                  "manual",
                  "device",
                  "aggregate"
                ],
                "type": "string"
              },
              "speed": {
                "description": "Speed at given position in meter/seconds",
                "type": "number"
              },
              "timestamp": {
                "description": "Timestamp in ISO8601 Date Time String Format",
                "format": "date-time",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": {
            "additionalProperties": false,
            "description": "GeoJSON Feature type",
            "enum": [
              "Feature"
            ],
            "type": "string"
          }
        },
        "readOnly": false,
        "type": "object"
      },
      "PositionListResponse": {
        "description": "Array Value Response",
        "properties": {
          "aggregate": {
            "$ref": "#/components/schemas/AggregateRef"
          },
          "entries": {
            "description": "Array of Positions",
            "items": {
              "$ref": "#/components/schemas/Position"
            },
            "readOnly": true,
            "type": "array"
          },
          "limit": {
            "description": "Position Page size",
            "readOnly": true,
            "type": "integer"
          },
          "next": {
            "description": "Next Position Page offset",
            "readOnly": true,
            "type": "integer"
          },
          "offset": {
            "description": "Position Page offset",
            "readOnly": true,
            "type": "integer"
          },
          "path": {
            "description": "Path to Value Object List",
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "description": "Number of Positions",
            "readOnly": true,
            "type": "integer"
          },
          "type": {
            "default": "Position",
            "description": "Value Object Type",
            "readOnly": true,
            "type": "string"
          }
        },
        "readOnly": true,
        "type": "object"
      },
      "Rectangle": {
        "additionalProperties": false,
        "description": "Rectangle feature described by two GeoJSON points forming upper left and lower right corners",
        "properties": {
          "geometry": {
            "items": {
              "$ref": "#/components/schemas/Point"
            },
            "maxItems": 2,
            "minItems": 2,
            "type": "array"
          },
          "properties": {
            "properties": {
              "description": {
                "description": "Feature description",
                "type": "string"
              },
              "name": {
                "description": "Feature name",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": {
            "additionalProperties": false,
            "description": "GeoJSON Feature type",
            "enum": [
              "Feature"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Source": {
        "description": "Source Response",
        "properties": {
          "type": {
            "additionalProperties": false,
            "description": "Source type",
            "enum": [
              "device",
              "trackable"
            ],
            "type": "string"
          },
          "uuid": {
            "description": "Foreign key to unique source identifier.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "uuid",
          "type"
        ],
        "type": "object"
      },
      "Subject": {
        "additionalProperties": false,
        "description": "Objective Schema",
        "properties": {
          "incident": {
            "additionalProperties": false,
            "properties": {
              "uuid": {
                "description": "Uuid of incident which this subject is affected by",
                "format": "uuid",
                "type": "string"
              }
            },
            "readOnly": true,
            "type": "object"
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "name": {
            "description": "Subject name",
            "type": "string"
          },
          "situation": {
            "description": "Subject situation",
            "type": "string"
          },
          "type": {
            "additionalProperties": false,
            "description": "Subject type",
            "enum": [
              "person",
              "vehicle",
              "other"
            ],
            "type": "string"
          },
          "uuid": {
            "$ref": "#/components/schemas/UUID"
          }
        },
        "required": [
          "uuid",
          "name",
          "type",
          "situation",
          "location"
        ],
        "type": "object"
      },
      "TalkGroup": {
        "additionalProperties": false,
        "description": "TalkGroup Response",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "name": {
            "description": "Talkgroup name",
            "type": "string"
          },
          "type": {
            "additionalProperties": false,
            "description": "Talkgroup type",
            "enum": [
              "tetra",
              "marine",
              "analog"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "type"
        ],
        "type": "object"
      },
      "Track": {
        "additionalProperties": false,
        "description": "Track Response",
        "properties": {
          "id": {
            "description": "Track id (unique in Tracking only)",
            "readOnly": true,
            "type": "string"
          },
          "positions": {
            "additionalProperties": false,
            "description": "List of sourced positions",
            "items": {
              "$ref": "#/components/schemas/Position"
            },
            "readOnly": true,
            "type": "array"
          },
          "source": {
            "$ref": "#/components/schemas/Source"
          },
          "status": {
            "additionalProperties": false,
            "description": "Track status",
            "enum": [
              "attached",
              "detached"
            ],
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "source"
        ],
        "type": "object"
      },
      "Tracking": {
        "additionalProperties": false,
        "description": "Tracking Schema (aggregate root)",
        "properties": {
          "distance": {
            "description": "Total distance in meter",
            "readOnly": true,
            "type": "number"
          },
          "effort": {
            "description": "Total effort in milliseconds",
            "readOnly": true,
            "type": "number"
          },
          "history": {
            "additionalProperties": false,
            "description": "List of historical positions",
            "items": {
              "$ref": "#/components/schemas/Position"
            },
            "readOnly": true,
            "type": "array"
          },
          "position": {
            "additionalProperties": false,
            "description": "Current position",
            "properties": {
              "geometry": {
                "$ref": "#/components/schemas/Point"
              },
              "properties": {
                "properties": {
                  "accuracy": {
                    "description": "Position accuracy",
                    "type": "number"
                  },
                  "activity": {
                    "additionalProperties": false,
                    "description": "Activity Value Object",
                    "properties": {
                      "confidence": {
                        "additionalProperties": false,
                        "default": "100",
                        "description": "Activity type confidence (0-100%)",
                        "type": "integer"
                      },
                      "type": {
                        "additionalProperties": false,
                        "default": "unknown",
                        "description": "Activity tyep",
                        "enum": [
                          "still",
                          "on_foot",
                          "walking",
                          "running",
                          "unknown",
                          "on_bicycle",
                          "in_vehicle"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "bearing": {
                    "description": "Bearing at given position in degrees",
                    "type": "number"
                  },
                  "description": {
                    "description": "Feature description",
                    "type": "string"
                  },
                  "name": {
                    "description": "Feature name",
                    "type": "string"
                  },
                  "source": {
                    "additionalProperties": false,
                    "default": "manual",
                    "description": "Position source",
                    "enum": [
                      "manual",
                      "device",
                      "aggregate"
                    ],
                    "type": "string"
                  },
                  "speed": {
                    "description": "Speed at given position in meter/seconds",
                    "type": "number"
                  },
                  "timestamp": {
                    "description": "Timestamp in ISO8601 Date Time String Format",
                    "format": "date-time",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": {
                "additionalProperties": false,
                "description": "GeoJSON Feature type",
                "enum": [
                  "Feature"
                ],
                "type": "string"
              }
            },
            "readOnly": true,
            "type": "object"
          },
          "sources": {
            "description": "Array of Source objects",
            "items": {
              "$ref": "#/components/schemas/Source"
            },
            "readOnly": false,
            "type": "array"
          },
          "speed": {
            "description": "Average speed in m/s",
            "readOnly": true,
            "type": "number"
          },
          "status": {
            "additionalProperties": false,
            "default": "created",
            "description": "Tracking status",
            "enum": [
              "none",
              "ready",
              "tracking",
              "paused",
              "closed"
            ],
            "readOnly": false,
            "type": "string"
          },
          "tracks": {
            "description": "Array of Track objects",
            "items": {
              "$ref": "#/components/schemas/Track"
            },
            "readOnly": false,
            "type": "array"
          },
          "uuid": {
            "$ref": "#/components/schemas/UUID"
          }
        },
        "required": [
          "uuid"
        ],
        "type": "object"
      },
      "TrackingStatus": {
        "additionalProperties": false,
        "default": "created",
        "enum": [
          "none",
          "ready",
          "tracking",
          "paused",
          "closed"
        ],
        "type": "string"
      },
      "TrackingStatusRequest": {
        "additionalProperties": false,
        "description": "Tracking transition request",
        "properties": {
          "status": {
            "additionalProperties": false,
            "default": "created",
            "enum": [
              "tracking",
              "paused"
            ],
            "type": "string"
          }
        },
        "readOnly": true,
        "type": "object"
      },
      "UUID": {
        "description": "A [universally unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier).",
        "format": "uuid",
        "type": "string"
      },
      "Unit": {
        "additionalProperties": false,
        "properties": {
          "affiliation": {
            "$ref": "#/components/schemas/Affiliation"
          },
          "callsign": {
            "description": "Unit callsign",
            "type": "string"
          },
          "messages": {
            "description": "List of messages added to Incident",
            "items": {
              "$ref": "#/components/schemas/Message"
            },
            "readOnly": true,
            "type": "array"
          },
          "number": {
            "description": "Unit number",
            "type": "integer"
          },
          "operation": {
            "additionalProperties": false,
            "description": "Operation which this unit belongs to",
            "properties": {
              "uuid": {
                "$ref": "#/components/schemas/UUID"
              }
            },
            "readOnly": true,
            "type": "object"
          },
          "personnels": {
            "description": "List of uuid of Personnels assigned to this unit",
            "items": {
              "$ref": "#/components/schemas/UUID"
            },
            "type": "array"
          },
          "phone": {
            "description": "Unit phone number",
            "type": "string"
          },
          "status": {
            "additionalProperties": false,
            "default": "mobilized",
            "description": "Unit status",
            "enum": [
              "mobilized",
              "deployed",
              "retired"
            ],
            "type": "string"
          },
          "tracking": {
            "description": "Unique id of tracking object created for this unit. Only writable on creation.",
            "properties": {
              "uuid": {
                "$ref": "#/components/schemas/UUID"
              }
            },
            "type": "object"
          },
          "transitions": {
            "description": "State transitions (read only)",
            "items": {
              "additionalProperties": false,
              "properties": {
                "status": {
                  "additionalProperties": false,
                  "default": "mobilized",
                  "description": "Unit status",
                  "enum": [
                    "mobilized",
                    "deployed",
                    "retired"
                  ],
                  "type": "string"
                },
                "timestamp": {
                  "description": "When transition occured",
                  "format": "date-time",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "readOnly": true,
            "type": "array"
          },
          "type": {
            "additionalProperties": false,
            "description": "Unit type",
            "enum": [
              "team",
              "k9",
              "boat",
              "vehicle",
              "snowmobile",
              "atv",
              "commandpost",
              "other"
            ],
            "type": "string"
          },
          "uuid": {
            "$ref": "#/components/schemas/UUID"
          }
        },
        "required": [
          "uuid",
          "type",
          "status",
          "number",
          "callsign"
        ],
        "type": "object"
      },
      "ValuePageResponse": {
        "description": "Array Value Response",
        "properties": {
          "aggregate": {
            "$ref": "#/components/schemas/AggregateRef"
          },
          "entries": {
            "description": "Array of Value Objects",
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "readOnly": true,
            "type": "array"
          },
          "limit": {
            "description": "null Page size",
            "readOnly": true,
            "type": "integer"
          },
          "next": {
            "description": "Next null Page offset",
            "readOnly": true,
            "type": "integer"
          },
          "offset": {
            "description": "null Page offset",
            "readOnly": true,
            "type": "integer"
          },
          "path": {
            "description": "Path to Value Object List",
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "description": "Number of nulls",
            "readOnly": true,
            "type": "integer"
          },
          "type": {
            "description": "Value Object Type",
            "readOnly": true,
            "type": "string"
          }
        },
        "readOnly": true,
        "type": "object"
      },
      "ValueResponse": {
        "description": "Value Object Response",
        "properties": {
          "aggregate": {
            "$ref": "#/components/schemas/AggregateRef"
          },
          "data": {
            "additionalProperties": true,
            "description": "Value Object  Data",
            "readOnly": true,
            "type": "object"
          },
          "number": {
            "description": "Last event applied to aggregate (can be used as version)",
            "readOnly": true,
            "type": "integer"
          },
          "type": {
            "description": "Value Object Type",
            "readOnly": true,
            "type": "string"
          }
        },
        "readOnly": true,
        "type": "object"
      }
    },
    "securitySchemes": {
      "OpenId Connect": {
        "openIdConnectUrl": "https://id.discoos.io/auth/realms/DISCOOS/.well-known/openid-configuration",
        "type": "openID"
      },
      "Passcode": {
        "description": "Authenticated users with an admin role is granted access to all objects and all available fields in each of these objects regardless of any affiliation or 'X-Passcode' given. All other roles are only granted access to objects if 'X-Passcode' is valid. Requests without header 'X-Passcode' or an invalid passcode will receive response `403 Forbidden`. Brute-force attacks are banned for a lmitied time without any feedback. When banned, all request will receive response `403 Forbidden` regardless of the value in 'X-Passcode'.",
        "in": "header",
        "name": "X-Passcode",
        "type": "apiKey"
      }
    }
  },
  "info": {
    "description": "SARSys App Server consumed by SarSys apps",
    "title": "SarSys App Server",
    "version": "0.0.1"
  },
  "openapi": "3.0.0",
  "paths": {
    "/api/affiliations": {
      "get": {
        "description": "Get all affiliations. ",
        "operationId": "getAll",
        "parameters": [
          {
            "description": "Start with affiliation number equal to offset. Default is 0.",
            "in": "query",
            "name": "offset"
          },
          {
            "description": "Maximum number of affiliation to fetch. Default is 20.",
            "in": "query",
            "name": "limit"
          },
          {
            "description": "Match values against given filter",
            "in": "query",
            "name": "filter"
          },
          {
            "description": "Only get aggregates in list of given comma-separated uuids. If filter is given, it is only applied on aggregates matching any uuids",
            "in": "query",
            "name": "uuids"
          },
          {
            "description": "Expand response with information from references. Legal values are: 'person'",
            "in": "query",
            "name": "expand"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Entities Response",
                  "properties": {
                    "entries": {
                      "description": "Array of Affiliations",
                      "items": {
                        "description": "Affiliation Response",
                        "properties": {
                          "changed": {
                            "description": "When Aggregate was created",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "created": {
                            "description": "When Aggregate was created",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "data": {
                            "$ref": "#/components/schemas/Affiliation"
                          },
                          "deleted": {
                            "description": "When Aggregate was created",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "number": {
                            "description": "Last event applied to aggregate (can be used as version)",
                            "readOnly": true,
                            "type": "integer"
                          },
                          "type": {
                            "default": "Affiliation",
                            "description": "Affiliation Type",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "readOnly": true,
                        "type": "object"
                      },
                      "readOnly": true,
                      "type": "array"
                    },
                    "limit": {
                      "description": "Aggregate Page size",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "next": {
                      "description": "Next Aggregate Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "offset": {
                      "description": "Aggregate Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "total": {
                      "description": "Number of aggregates",
                      "readOnly": true,
                      "type": "integer"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get all affiliations",
        "tags": [
          "Affiliations"
        ]
      },
      "parameters": [],
      "post": {
        "description": "Create affiliation. The field [uuid] MUST BE unique for each Affiliation. Use a [universally unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier).",
        "operationId": "create",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Affiliation"
              }
            }
          },
          "description": "New Affiliation Request",
          "required": true
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Create affiliation",
        "tags": [
          "Affiliations"
        ]
      }
    },
    "/api/affiliations/onboard": {
      "parameters": [],
      "post": {
        "description": "Create affiliate. The field [uuid] MUST BE unique for each Affiliation. Use a [universally unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier).",
        "operationId": "create",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Affiliate"
              }
            }
          },
          "description": "Onboard Affiliate Request",
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "201": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Create affiliate",
        "tags": [
          "Affiliations > Onboard"
        ]
      }
    },
    "/api/affiliations/{uuid}": {
      "delete": {
        "description": "Delete affiliation. ",
        "operationId": "delete",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Delete affiliation",
        "tags": [
          "Affiliations"
        ]
      },
      "get": {
        "description": "Get affiliation. ",
        "operationId": "getByUuid",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "allowEmptyValue": false,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Match values against given filter",
            "in": "query",
            "name": "filter"
          },
          {
            "description": "Only get aggregates in list of given comma-separated uuids. If filter is given, it is only applied on aggregates matching any uuids",
            "in": "query",
            "name": "uuids"
          },
          {
            "description": "Expand response with information from references. Legal values are: 'person'",
            "in": "query",
            "name": "expand"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Affiliation Response",
                  "properties": {
                    "changed": {
                      "description": "When Aggregate was created",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "created": {
                      "description": "When Aggregate was created",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Affiliation"
                    },
                    "deleted": {
                      "description": "When Aggregate was created",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "number": {
                      "description": "Last event applied to aggregate (can be used as version)",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "type": {
                      "default": "Affiliation",
                      "description": "Affiliation Type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get affiliation",
        "tags": [
          "Affiliations"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "description": "Update affiliation. Only fields in request are applied to Affiliation. Other values remain unchanged.",
        "operationId": "update",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Affiliation"
              }
            }
          },
          "description": "Update Affiliation Request. Only fields in request are updated.",
          "required": true
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Update affiliation",
        "tags": [
          "Affiliations"
        ]
      }
    },
    "/api/app-configs": {
      "get": {
        "description": "Get all app configs. This operation is only allowed for admin users.",
        "operationId": "getAll",
        "parameters": [
          {
            "description": "Start with app config number equal to offset. Default is 0.",
            "in": "query",
            "name": "offset"
          },
          {
            "description": "Maximum number of app config to fetch. Default is 20.",
            "in": "query",
            "name": "limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Entities Response",
                  "properties": {
                    "entries": {
                      "description": "Array of AppConfigs",
                      "items": {
                        "description": "AppConfig Response",
                        "properties": {
                          "changed": {
                            "description": "When Aggregate was created",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "created": {
                            "description": "When Aggregate was created",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "data": {
                            "$ref": "#/components/schemas/AppConfig"
                          },
                          "deleted": {
                            "description": "When Aggregate was created",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "number": {
                            "description": "Last event applied to aggregate (can be used as version)",
                            "readOnly": true,
                            "type": "integer"
                          },
                          "type": {
                            "default": "AppConfig",
                            "description": "AppConfig Type",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "readOnly": true,
                        "type": "object"
                      },
                      "readOnly": true,
                      "type": "array"
                    },
                    "limit": {
                      "description": "Aggregate Page size",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "next": {
                      "description": "Next Aggregate Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "offset": {
                      "description": "Aggregate Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "total": {
                      "description": "Number of aggregates",
                      "readOnly": true,
                      "type": "integer"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get all app configs",
        "tags": [
          "Tenant"
        ]
      },
      "parameters": [],
      "post": {
        "description": "Create app config. The field [uuid] MUST BE unique for each application. Use a OS-spesific device id or a [universally unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier).",
        "operationId": "create",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppConfig"
              }
            }
          },
          "description": "New AppConfig Request",
          "required": true
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Create app config",
        "tags": [
          "Tenant"
        ]
      }
    },
    "/api/app-configs/{uuid}": {
      "delete": {
        "description": "Delete app config. ",
        "operationId": "delete",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Delete app config",
        "tags": [
          "Tenant"
        ]
      },
      "get": {
        "description": "Get app config. A configuration is unique for each application regardless of which user is logged in.",
        "operationId": "getByUuid",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "AppConfig Response",
                  "properties": {
                    "changed": {
                      "description": "When Aggregate was created",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "created": {
                      "description": "When Aggregate was created",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/AppConfig"
                    },
                    "deleted": {
                      "description": "When Aggregate was created",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "number": {
                      "description": "Last event applied to aggregate (can be used as version)",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "type": {
                      "default": "AppConfig",
                      "description": "AppConfig Type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get app config",
        "tags": [
          "Tenant"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "description": "Update app config. Only fields in request are updated. Existing values WILL BE overwritten, others remain unchanged.",
        "operationId": "update",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppConfig"
              }
            }
          },
          "description": "Update AppConfig Request. Only fields in request are updated.",
          "required": true
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Update app config",
        "tags": [
          "Tenant"
        ]
      }
    },
    "/api/departments": {
      "get": {
        "description": "Get all departments. ",
        "operationId": "getAll",
        "parameters": [
          {
            "description": "Start with department number equal to offset. Default is 0.",
            "in": "query",
            "name": "offset"
          },
          {
            "description": "Maximum number of department to fetch. Default is 20.",
            "in": "query",
            "name": "limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Entities Response",
                  "properties": {
                    "entries": {
                      "description": "Array of Departments",
                      "items": {
                        "description": "Department Response",
                        "properties": {
                          "changed": {
                            "description": "When Aggregate was created",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "created": {
                            "description": "When Aggregate was created",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "data": {
                            "$ref": "#/components/schemas/Department"
                          },
                          "deleted": {
                            "description": "When Aggregate was created",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "number": {
                            "description": "Last event applied to aggregate (can be used as version)",
                            "readOnly": true,
                            "type": "integer"
                          },
                          "type": {
                            "default": "Department",
                            "description": "Department Type",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "readOnly": true,
                        "type": "object"
                      },
                      "readOnly": true,
                      "type": "array"
                    },
                    "limit": {
                      "description": "Aggregate Page size",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "next": {
                      "description": "Next Aggregate Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "offset": {
                      "description": "Aggregate Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "total": {
                      "description": "Number of aggregates",
                      "readOnly": true,
                      "type": "integer"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get all departments",
        "tags": [
          "Departments"
        ]
      },
      "parameters": []
    },
    "/api/departments/{uuid}": {
      "delete": {
        "description": "Delete department. ",
        "operationId": "delete",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Delete department",
        "tags": [
          "Departments"
        ]
      },
      "get": {
        "description": "Get department. ",
        "operationId": "getByUuid",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Department Response",
                  "properties": {
                    "changed": {
                      "description": "When Aggregate was created",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "created": {
                      "description": "When Aggregate was created",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Department"
                    },
                    "deleted": {
                      "description": "When Aggregate was created",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "number": {
                      "description": "Last event applied to aggregate (can be used as version)",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "type": {
                      "default": "Department",
                      "description": "Department Type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get department",
        "tags": [
          "Departments"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "description": "Update department. Only fields in request are applied to Department. Other values remain unchanged.",
        "operationId": "update",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Department"
              }
            }
          },
          "description": "Update Department Request. Only fields in request are updated.",
          "required": true
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Update department",
        "tags": [
          "Departments"
        ]
      }
    },
    "/api/devices": {
      "get": {
        "description": "Get all devices. ",
        "operationId": "getAll",
        "parameters": [
          {
            "description": "Start with device number equal to offset. Default is 0.",
            "in": "query",
            "name": "offset"
          },
          {
            "description": "Maximum number of device to fetch. Default is 20.",
            "in": "query",
            "name": "limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Entities Response",
                  "properties": {
                    "entries": {
                      "description": "Array of Devices",
                      "items": {
                        "description": "Device Response",
                        "properties": {
                          "changed": {
                            "description": "When Aggregate was created",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "created": {
                            "description": "When Aggregate was created",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "data": {
                            "$ref": "#/components/schemas/Device"
                          },
                          "deleted": {
                            "description": "When Aggregate was created",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "number": {
                            "description": "Last event applied to aggregate (can be used as version)",
                            "readOnly": true,
                            "type": "integer"
                          },
                          "type": {
                            "default": "Device",
                            "description": "Device Type",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "readOnly": true,
                        "type": "object"
                      },
                      "readOnly": true,
                      "type": "array"
                    },
                    "limit": {
                      "description": "Aggregate Page size",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "next": {
                      "description": "Next Aggregate Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "offset": {
                      "description": "Aggregate Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "total": {
                      "description": "Number of aggregates",
                      "readOnly": true,
                      "type": "integer"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get all devices",
        "tags": [
          "Devices"
        ]
      },
      "parameters": [],
      "post": {
        "description": "Create device. The field [uuid] MUST BE unique for each Device. Use a [universally unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier).",
        "operationId": "create",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Device"
              }
            }
          },
          "description": "New Device Request",
          "required": true
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Create device",
        "tags": [
          "Devices"
        ]
      }
    },
    "/api/devices/{uuid}": {
      "delete": {
        "description": "Delete device. ",
        "operationId": "delete",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Delete device",
        "tags": [
          "Devices"
        ]
      },
      "get": {
        "description": "Get device. ",
        "operationId": "getByUuid",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Device Response",
                  "properties": {
                    "changed": {
                      "description": "When Aggregate was created",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "created": {
                      "description": "When Aggregate was created",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Device"
                    },
                    "deleted": {
                      "description": "When Aggregate was created",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "number": {
                      "description": "Last event applied to aggregate (can be used as version)",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "type": {
                      "default": "Device",
                      "description": "Device Type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get device",
        "tags": [
          "Devices"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "description": "Update device. Only fields in request are applied to Device. Other values remain unchanged.",
        "operationId": "update",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Device"
              }
            }
          },
          "description": "Update Device Request. Only fields in request are updated.",
          "required": true
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Update device",
        "tags": [
          "Devices"
        ]
      }
    },
    "/api/devices/{uuid}/messages": {
      "get": {
        "description": "Get all messages. ",
        "operationId": "getAllMessage",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Entities Response",
                  "properties": {
                    "aggregate": {
                      "$ref": "#/components/schemas/AggregateRef"
                    },
                    "entries": {
                      "description": "Array of Messages",
                      "items": {
                        "$ref": "#/components/schemas/Message"
                      },
                      "readOnly": true,
                      "type": "array"
                    },
                    "limit": {
                      "description": "Message Page size",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "next": {
                      "description": "Next Message Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "offset": {
                      "description": "Message Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "path": {
                      "description": "Path to Entity Object List",
                      "readOnly": true,
                      "type": "string"
                    },
                    "total": {
                      "description": "Number of entities",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "type": {
                      "default": "Message",
                      "description": "Entity Object Type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get all messages",
        "tags": [
          "Devices > Messages"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Create message. The field [id] MUST BE unique for each Message. Use a [universally unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier).",
        "operationId": "createMessage",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Message"
              }
            }
          },
          "description": "New Message Request",
          "required": true
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Create message",
        "tags": [
          "Devices > Messages"
        ]
      }
    },
    "/api/devices/{uuid}/messages/{id}": {
      "delete": {
        "description": "Delete message. ",
        "operationId": "deleteMessage",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Delete message",
        "tags": [
          "Devices > Messages"
        ]
      },
      "get": {
        "description": "Get message. ",
        "operationId": "getByIdMessage",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Message Response",
                  "properties": {
                    "aggregate": {
                      "$ref": "#/components/schemas/AggregateRef"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Message"
                    },
                    "number": {
                      "description": "Last event applied to aggregate (can be used as version)",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "type": {
                      "default": "Message",
                      "description": "Message Type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get message",
        "tags": [
          "Devices > Messages"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "description": "Update message. Only fields in request are updated. Existing values WILL BE overwritten, others remain unchanged.",
        "operationId": "updateMessage",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Message"
              }
            }
          },
          "description": "Update Message Request. Only fields in request are updated.",
          "required": true
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Update message",
        "tags": [
          "Devices > Messages"
        ]
      }
    },
    "/api/devices/{uuid}/position": {
      "get": {
        "description": "Get position. ",
        "operationId": "getPosition",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Value Object Response",
                  "properties": {
                    "aggregate": {
                      "$ref": "#/components/schemas/AggregateRef"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Position"
                    },
                    "number": {
                      "description": "Last event applied to aggregate (can be used as version)",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "type": {
                      "default": "Position",
                      "description": "Position Type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get position",
        "tags": [
          "Device > Position"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "description": "Update position. Only fields in request are updated. Existing values WILL BE overwritten, others remain unchanged.",
        "operationId": "updatePosition",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Position"
              }
            }
          },
          "description": "Update Device. Only field position is updated.",
          "required": true
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Update position",
        "tags": [
          "Device > Position"
        ]
      }
    },
    "/api/devices/{uuid}/positions": {
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Process Positions. Only fields in each Position are applied. Existing values WILL BE overwritten, others remain unchanged.",
        "operationId": "batchPosition",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Process Position. Only fields in each Position are updated.",
                "items": {
                  "$ref": "#/components/schemas/Position"
                },
                "type": "array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/503"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Process Positions",
        "tags": [
          "Device > Position"
        ]
      }
    },
    "/api/divisions": {
      "get": {
        "description": "Get all divisions. ",
        "operationId": "getAll",
        "parameters": [
          {
            "description": "Start with division number equal to offset. Default is 0.",
            "in": "query",
            "name": "offset"
          },
          {
            "description": "Maximum number of division to fetch. Default is 20.",
            "in": "query",
            "name": "limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Entities Response",
                  "properties": {
                    "entries": {
                      "description": "Array of Divisions",
                      "items": {
                        "description": "Division Response",
                        "properties": {
                          "changed": {
                            "description": "When Aggregate was created",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "created": {
                            "description": "When Aggregate was created",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "data": {
                            "$ref": "#/components/schemas/Division"
                          },
                          "deleted": {
                            "description": "When Aggregate was created",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "number": {
                            "description": "Last event applied to aggregate (can be used as version)",
                            "readOnly": true,
                            "type": "integer"
                          },
                          "type": {
                            "default": "Division",
                            "description": "Division Type",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "readOnly": true,
                        "type": "object"
                      },
                      "readOnly": true,
                      "type": "array"
                    },
                    "limit": {
                      "description": "Aggregate Page size",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "next": {
                      "description": "Next Aggregate Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "offset": {
                      "description": "Aggregate Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "total": {
                      "description": "Number of aggregates",
                      "readOnly": true,
                      "type": "integer"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get all divisions",
        "tags": [
          "Divisions"
        ]
      },
      "parameters": []
    },
    "/api/divisions/{uuid}": {
      "delete": {
        "description": "Delete division. ",
        "operationId": "delete",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Delete division",
        "tags": [
          "Divisions"
        ]
      },
      "get": {
        "description": "Get division. ",
        "operationId": "getByUuid",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Division Response",
                  "properties": {
                    "changed": {
                      "description": "When Aggregate was created",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "created": {
                      "description": "When Aggregate was created",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Division"
                    },
                    "deleted": {
                      "description": "When Aggregate was created",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "number": {
                      "description": "Last event applied to aggregate (can be used as version)",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "type": {
                      "default": "Division",
                      "description": "Division Type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get division",
        "tags": [
          "Divisions"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "description": "Update division. Only fields in request are applied to Division. Other values remain unchanged.",
        "operationId": "update",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Division"
              }
            }
          },
          "description": "Update Division Request. Only fields in request are updated.",
          "required": true
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Update division",
        "tags": [
          "Divisions"
        ]
      }
    },
    "/api/divisions/{uuid}/departments": {
      "get": {
        "description": "Get all departments",
        "operationId": "getDepartments",
        "parameters": [
          {
            "description": "Division uuid",
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Start with department number equal to offset. Default is 0.",
            "in": "query",
            "name": "offset"
          },
          {
            "description": "Maximum number of department to fetch. Default is 20.",
            "in": "query",
            "name": "limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Department"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Successful response."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get all departments",
        "tags": [
          "Divisions"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Create department and add uuid to departments in Division. Ids MUST BE unique for each department. Use a [universally unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier).",
        "operationId": "createDepartments",
        "parameters": [
          {
            "description": "Division uuid",
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Department"
              }
            }
          },
          "description": "New Department",
          "required": true
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Create department and add uuid to departments in Division",
        "tags": [
          "Divisions"
        ]
      }
    },
    "/api/healthz/alive": {
      "get": {
        "operationId": "check",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response."
          }
        },
        "tags": [
          "System"
        ]
      },
      "parameters": []
    },
    "/api/healthz/ready": {
      "get": {
        "operationId": "check",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response."
          }
        },
        "tags": [
          "System"
        ]
      },
      "parameters": []
    },
    "/api/incidents": {
      "get": {
        "description": "Get all incidents. ",
        "operationId": "getAll",
        "parameters": [
          {
            "description": "Start with incident number equal to offset. Default is 0.",
            "in": "query",
            "name": "offset"
          },
          {
            "description": "Maximum number of incident to fetch. Default is 20.",
            "in": "query",
            "name": "limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Entities Response",
                  "properties": {
                    "entries": {
                      "description": "Array of Incidents",
                      "items": {
                        "description": "Incident Response",
                        "properties": {
                          "changed": {
                            "description": "When Aggregate was created",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "created": {
                            "description": "When Aggregate was created",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "data": {
                            "$ref": "#/components/schemas/Incident"
                          },
                          "deleted": {
                            "description": "When Aggregate was created",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "number": {
                            "description": "Last event applied to aggregate (can be used as version)",
                            "readOnly": true,
                            "type": "integer"
                          },
                          "type": {
                            "default": "Incident",
                            "description": "Incident Type",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "readOnly": true,
                        "type": "object"
                      },
                      "readOnly": true,
                      "type": "array"
                    },
                    "limit": {
                      "description": "Aggregate Page size",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "next": {
                      "description": "Next Aggregate Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "offset": {
                      "description": "Aggregate Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "total": {
                      "description": "Number of aggregates",
                      "readOnly": true,
                      "type": "integer"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get all incidents",
        "tags": [
          "Incidents"
        ]
      },
      "parameters": [],
      "post": {
        "description": "Create incident. The field [uuid] MUST BE unique for each Incident. Use a [universally unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier).",
        "operationId": "create",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Incident"
              }
            }
          },
          "description": "New Incident Request",
          "required": true
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Create incident",
        "tags": [
          "Incidents"
        ]
      }
    },
    "/api/incidents/{uuid}": {
      "delete": {
        "description": "Delete incident. ",
        "operationId": "delete",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Delete incident",
        "tags": [
          "Incidents"
        ]
      },
      "get": {
        "description": "Get incident. ",
        "operationId": "getByUuid",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Incident Response",
                  "properties": {
                    "changed": {
                      "description": "When Aggregate was created",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "created": {
                      "description": "When Aggregate was created",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Incident"
                    },
                    "deleted": {
                      "description": "When Aggregate was created",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "number": {
                      "description": "Last event applied to aggregate (can be used as version)",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "type": {
                      "default": "Incident",
                      "description": "Incident Type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get incident",
        "tags": [
          "Incidents"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "description": "Update incident. Only fields in request are applied to Incident. Other values remain unchanged.",
        "operationId": "update",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Incident"
              }
            }
          },
          "description": "Update Incident Request. Only fields in request are updated.",
          "required": true
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Update incident",
        "tags": [
          "Incidents"
        ]
      }
    },
    "/api/incidents/{uuid}/clues": {
      "get": {
        "description": "Get all clues. ",
        "operationId": "getAllClue",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Entities Response",
                  "properties": {
                    "aggregate": {
                      "$ref": "#/components/schemas/AggregateRef"
                    },
                    "entries": {
                      "description": "Array of Clues",
                      "items": {
                        "$ref": "#/components/schemas/Clue"
                      },
                      "readOnly": true,
                      "type": "array"
                    },
                    "limit": {
                      "description": "Clue Page size",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "next": {
                      "description": "Next Clue Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "offset": {
                      "description": "Clue Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "path": {
                      "description": "Path to Entity Object List",
                      "readOnly": true,
                      "type": "string"
                    },
                    "total": {
                      "description": "Number of entities",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "type": {
                      "default": "Clue",
                      "description": "Entity Object Type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get all clues",
        "tags": [
          "Incidents > Clues"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Create clue. The field [id] MUST BE unique for each Clue. Use a [universally unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier).",
        "operationId": "createClue",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Clue"
              }
            }
          },
          "description": "New Clue Request",
          "required": true
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Create clue",
        "tags": [
          "Incidents > Clues"
        ]
      }
    },
    "/api/incidents/{uuid}/clues/{id}": {
      "delete": {
        "description": "Delete clue. ",
        "operationId": "deleteClue",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Delete clue",
        "tags": [
          "Incidents > Clues"
        ]
      },
      "get": {
        "description": "Get clue. ",
        "operationId": "getByIdClue",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Clue Response",
                  "properties": {
                    "aggregate": {
                      "$ref": "#/components/schemas/AggregateRef"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Clue"
                    },
                    "number": {
                      "description": "Last event applied to aggregate (can be used as version)",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "type": {
                      "default": "Clue",
                      "description": "Clue Type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get clue",
        "tags": [
          "Incidents > Clues"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "description": "Update clue. Only fields in request are updated. Existing values WILL BE overwritten, others remain unchanged.",
        "operationId": "updateClue",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Clue"
              }
            }
          },
          "description": "Update Clue Request. Only fields in request are updated.",
          "required": true
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Update clue",
        "tags": [
          "Incidents > Clues"
        ]
      }
    },
    "/api/incidents/{uuid}/messages": {
      "get": {
        "description": "Get all messages. ",
        "operationId": "getAllMessage",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Entities Response",
                  "properties": {
                    "aggregate": {
                      "$ref": "#/components/schemas/AggregateRef"
                    },
                    "entries": {
                      "description": "Array of Messages",
                      "items": {
                        "$ref": "#/components/schemas/Message"
                      },
                      "readOnly": true,
                      "type": "array"
                    },
                    "limit": {
                      "description": "Message Page size",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "next": {
                      "description": "Next Message Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "offset": {
                      "description": "Message Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "path": {
                      "description": "Path to Entity Object List",
                      "readOnly": true,
                      "type": "string"
                    },
                    "total": {
                      "description": "Number of entities",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "type": {
                      "default": "Message",
                      "description": "Entity Object Type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get all messages",
        "tags": [
          "Incidents > Messages"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Create message. The field [id] MUST BE unique for each Message. Use a [universally unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier).",
        "operationId": "createMessage",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Message"
              }
            }
          },
          "description": "New Message Request",
          "required": true
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Create message",
        "tags": [
          "Incidents > Messages"
        ]
      }
    },
    "/api/incidents/{uuid}/messages/{id}": {
      "delete": {
        "description": "Delete message. ",
        "operationId": "deleteMessage",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Delete message",
        "tags": [
          "Incidents > Messages"
        ]
      },
      "get": {
        "description": "Get message. ",
        "operationId": "getByIdMessage",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Message Response",
                  "properties": {
                    "aggregate": {
                      "$ref": "#/components/schemas/AggregateRef"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Message"
                    },
                    "number": {
                      "description": "Last event applied to aggregate (can be used as version)",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "type": {
                      "default": "Message",
                      "description": "Message Type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get message",
        "tags": [
          "Incidents > Messages"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "description": "Update message. Only fields in request are updated. Existing values WILL BE overwritten, others remain unchanged.",
        "operationId": "updateMessage",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Message"
              }
            }
          },
          "description": "Update Message Request. Only fields in request are updated.",
          "required": true
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Update message",
        "tags": [
          "Incidents > Messages"
        ]
      }
    },
    "/api/incidents/{uuid}/operations": {
      "get": {
        "description": "Get all operations",
        "operationId": "getOperations",
        "parameters": [
          {
            "description": "Incident uuid",
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Start with operation number equal to offset. Default is 0.",
            "in": "query",
            "name": "offset"
          },
          {
            "description": "Maximum number of operation to fetch. Default is 20.",
            "in": "query",
            "name": "limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Operation"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Successful response."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get all operations",
        "tags": [
          "Incidents > Operations"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Create operation and add uuid to operations in Incident. Ids MUST BE unique for each operation. Use a [universally unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier).",
        "operationId": "createOperations",
        "parameters": [
          {
            "description": "Incident uuid",
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Operation"
              }
            }
          },
          "description": "New Operation",
          "required": true
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Create operation and add uuid to operations in Incident",
        "tags": [
          "Incidents > Operations"
        ]
      }
    },
    "/api/incidents/{uuid}/subjects": {
      "get": {
        "description": "Get all subjects",
        "operationId": "getSubjects",
        "parameters": [
          {
            "description": "Incident uuid",
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Start with subject number equal to offset. Default is 0.",
            "in": "query",
            "name": "offset"
          },
          {
            "description": "Maximum number of subject to fetch. Default is 20.",
            "in": "query",
            "name": "limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Subject"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Successful response."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get all subjects",
        "tags": [
          "Incidents > Subjects"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Create subject and add uuid to subjects in Incident. Ids MUST BE unique for each subject. Use a [universally unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier).",
        "operationId": "createSubjects",
        "parameters": [
          {
            "description": "Incident uuid",
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Subject"
              }
            }
          },
          "description": "New Subject",
          "required": true
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Create subject and add uuid to subjects in Incident",
        "tags": [
          "Incidents > Subjects"
        ]
      }
    },
    "/api/messages/connect": {
      "parameters": []
    },
    "/api/missions": {
      "get": {
        "description": "Get all missions. ",
        "operationId": "getAll",
        "parameters": [
          {
            "description": "Start with mission number equal to offset. Default is 0.",
            "in": "query",
            "name": "offset"
          },
          {
            "description": "Maximum number of mission to fetch. Default is 20.",
            "in": "query",
            "name": "limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Entities Response",
                  "properties": {
                    "entries": {
                      "description": "Array of Missions",
                      "items": {
                        "description": "Mission Response",
                        "properties": {
                          "changed": {
                            "description": "When Aggregate was created",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "created": {
                            "description": "When Aggregate was created",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "data": {
                            "$ref": "#/components/schemas/Mission"
                          },
                          "deleted": {
                            "description": "When Aggregate was created",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "number": {
                            "description": "Last event applied to aggregate (can be used as version)",
                            "readOnly": true,
                            "type": "integer"
                          },
                          "type": {
                            "default": "Mission",
                            "description": "Mission Type",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "readOnly": true,
                        "type": "object"
                      },
                      "readOnly": true,
                      "type": "array"
                    },
                    "limit": {
                      "description": "Aggregate Page size",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "next": {
                      "description": "Next Aggregate Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "offset": {
                      "description": "Aggregate Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "total": {
                      "description": "Number of aggregates",
                      "readOnly": true,
                      "type": "integer"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get all missions",
        "tags": [
          "Missions"
        ]
      },
      "parameters": []
    },
    "/api/missions/{uuid}": {
      "delete": {
        "description": "Delete mission. ",
        "operationId": "delete",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Delete mission",
        "tags": [
          "Missions"
        ]
      },
      "get": {
        "description": "Get mission. ",
        "operationId": "getByUuid",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Mission Response",
                  "properties": {
                    "changed": {
                      "description": "When Aggregate was created",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "created": {
                      "description": "When Aggregate was created",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Mission"
                    },
                    "deleted": {
                      "description": "When Aggregate was created",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "number": {
                      "description": "Last event applied to aggregate (can be used as version)",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "type": {
                      "default": "Mission",
                      "description": "Mission Type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get mission",
        "tags": [
          "Missions"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "description": "Update mission. Only fields in request are applied to Mission. Other values remain unchanged.",
        "operationId": "update",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mission"
              }
            }
          },
          "description": "Update Mission Request. Only fields in request are updated.",
          "required": true
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Update mission",
        "tags": [
          "Missions"
        ]
      }
    },
    "/api/missions/{uuid}/messages": {
      "get": {
        "description": "Get all messages. ",
        "operationId": "getAllMessage",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Entities Response",
                  "properties": {
                    "aggregate": {
                      "$ref": "#/components/schemas/AggregateRef"
                    },
                    "entries": {
                      "description": "Array of Messages",
                      "items": {
                        "$ref": "#/components/schemas/Message"
                      },
                      "readOnly": true,
                      "type": "array"
                    },
                    "limit": {
                      "description": "Message Page size",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "next": {
                      "description": "Next Message Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "offset": {
                      "description": "Message Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "path": {
                      "description": "Path to Entity Object List",
                      "readOnly": true,
                      "type": "string"
                    },
                    "total": {
                      "description": "Number of entities",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "type": {
                      "default": "Message",
                      "description": "Entity Object Type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get all messages",
        "tags": [
          "Missions > Messages"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Create message. The field [id] MUST BE unique for each Message. Use a [universally unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier).",
        "operationId": "createMessage",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Message"
              }
            }
          },
          "description": "New Message Request",
          "required": true
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Create message",
        "tags": [
          "Missions > Messages"
        ]
      }
    },
    "/api/missions/{uuid}/messages/{id}": {
      "delete": {
        "description": "Delete message. ",
        "operationId": "deleteMessage",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Delete message",
        "tags": [
          "Missions > Messages"
        ]
      },
      "get": {
        "description": "Get message. ",
        "operationId": "getByIdMessage",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Message Response",
                  "properties": {
                    "aggregate": {
                      "$ref": "#/components/schemas/AggregateRef"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Message"
                    },
                    "number": {
                      "description": "Last event applied to aggregate (can be used as version)",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "type": {
                      "default": "Message",
                      "description": "Message Type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get message",
        "tags": [
          "Missions > Messages"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "description": "Update message. Only fields in request are updated. Existing values WILL BE overwritten, others remain unchanged.",
        "operationId": "updateMessage",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Message"
              }
            }
          },
          "description": "Update Message Request. Only fields in request are updated.",
          "required": true
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Update message",
        "tags": [
          "Missions > Messages"
        ]
      }
    },
    "/api/missions/{uuid}/parts": {
      "get": {
        "description": "Get all mission parts. ",
        "operationId": "getAllMissionPart",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Entities Response",
                  "properties": {
                    "aggregate": {
                      "$ref": "#/components/schemas/AggregateRef"
                    },
                    "entries": {
                      "description": "Array of MissionParts",
                      "items": {
                        "$ref": "#/components/schemas/MissionPart"
                      },
                      "readOnly": true,
                      "type": "array"
                    },
                    "limit": {
                      "description": "MissionPart Page size",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "next": {
                      "description": "Next MissionPart Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "offset": {
                      "description": "MissionPart Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "path": {
                      "description": "Path to Entity Object List",
                      "readOnly": true,
                      "type": "string"
                    },
                    "total": {
                      "description": "Number of entities",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "type": {
                      "default": "MissionPart",
                      "description": "Entity Object Type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get all mission parts",
        "tags": [
          "Missions > Parts"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Create mission part. The field [id] MUST BE unique for each MissionPart. Use a [universally unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier).",
        "operationId": "createMissionPart",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MissionPart"
              }
            }
          },
          "description": "New MissionPart Request",
          "required": true
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Create mission part",
        "tags": [
          "Missions > Parts"
        ]
      }
    },
    "/api/missions/{uuid}/parts/{id}": {
      "delete": {
        "description": "Delete mission part. ",
        "operationId": "deleteMissionPart",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Delete mission part",
        "tags": [
          "Missions > Parts"
        ]
      },
      "get": {
        "description": "Get mission part. ",
        "operationId": "getByIdMissionPart",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "MissionPart Response",
                  "properties": {
                    "aggregate": {
                      "$ref": "#/components/schemas/AggregateRef"
                    },
                    "data": {
                      "$ref": "#/components/schemas/MissionPart"
                    },
                    "number": {
                      "description": "Last event applied to aggregate (can be used as version)",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "type": {
                      "default": "MissionPart",
                      "description": "MissionPart Type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get mission part",
        "tags": [
          "Missions > Parts"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "description": "Update mission part. Only fields in request are updated. Existing values WILL BE overwritten, others remain unchanged.",
        "operationId": "updateMissionPart",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MissionPart"
              }
            }
          },
          "description": "Update MissionPart Request. Only fields in request are updated.",
          "required": true
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Update mission part",
        "tags": [
          "Missions > Parts"
        ]
      }
    },
    "/api/missions/{uuid}/results": {
      "get": {
        "description": "Get all mission results. ",
        "operationId": "getAllMissionResult",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Entities Response",
                  "properties": {
                    "aggregate": {
                      "$ref": "#/components/schemas/AggregateRef"
                    },
                    "entries": {
                      "description": "Array of MissionResults",
                      "items": {
                        "$ref": "#/components/schemas/MissionResult"
                      },
                      "readOnly": true,
                      "type": "array"
                    },
                    "limit": {
                      "description": "MissionResult Page size",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "next": {
                      "description": "Next MissionResult Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "offset": {
                      "description": "MissionResult Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "path": {
                      "description": "Path to Entity Object List",
                      "readOnly": true,
                      "type": "string"
                    },
                    "total": {
                      "description": "Number of entities",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "type": {
                      "default": "MissionResult",
                      "description": "Entity Object Type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get all mission results",
        "tags": [
          "Missions > Results"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Create mission result. The field [id] MUST BE unique for each MissionResult. Use a [universally unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier).",
        "operationId": "createMissionResult",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MissionResult"
              }
            }
          },
          "description": "New MissionResult Request",
          "required": true
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Create mission result",
        "tags": [
          "Missions > Results"
        ]
      }
    },
    "/api/missions/{uuid}/results/{id}": {
      "delete": {
        "description": "Delete mission result. ",
        "operationId": "deleteMissionResult",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Delete mission result",
        "tags": [
          "Missions > Results"
        ]
      },
      "get": {
        "description": "Get mission result. ",
        "operationId": "getByIdMissionResult",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "MissionResult Response",
                  "properties": {
                    "aggregate": {
                      "$ref": "#/components/schemas/AggregateRef"
                    },
                    "data": {
                      "$ref": "#/components/schemas/MissionResult"
                    },
                    "number": {
                      "description": "Last event applied to aggregate (can be used as version)",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "type": {
                      "default": "MissionResult",
                      "description": "MissionResult Type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get mission result",
        "tags": [
          "Missions > Results"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "description": "Update mission result. Only fields in request are updated. Existing values WILL BE overwritten, others remain unchanged.",
        "operationId": "updateMissionResult",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MissionResult"
              }
            }
          },
          "description": "Update MissionResult Request. Only fields in request are updated.",
          "required": true
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Update mission result",
        "tags": [
          "Missions > Results"
        ]
      }
    },
    "/api/operations": {
      "get": {
        "description": "Get all operations. ",
        "operationId": "getAll",
        "parameters": [
          {
            "description": "Start with operation number equal to offset. Default is 0.",
            "in": "query",
            "name": "offset"
          },
          {
            "description": "Maximum number of operation to fetch. Default is 20.",
            "in": "query",
            "name": "limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Entities Response",
                  "properties": {
                    "entries": {
                      "description": "Array of Operations",
                      "items": {
                        "description": "Operation Response",
                        "properties": {
                          "changed": {
                            "description": "When Aggregate was created",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "created": {
                            "description": "When Aggregate was created",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "data": {
                            "$ref": "#/components/schemas/Operation"
                          },
                          "deleted": {
                            "description": "When Aggregate was created",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "number": {
                            "description": "Last event applied to aggregate (can be used as version)",
                            "readOnly": true,
                            "type": "integer"
                          },
                          "type": {
                            "default": "Operation",
                            "description": "Operation Type",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "readOnly": true,
                        "type": "object"
                      },
                      "readOnly": true,
                      "type": "array"
                    },
                    "limit": {
                      "description": "Aggregate Page size",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "next": {
                      "description": "Next Aggregate Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "offset": {
                      "description": "Aggregate Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "total": {
                      "description": "Number of aggregates",
                      "readOnly": true,
                      "type": "integer"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get all operations",
        "tags": [
          "Operations"
        ]
      },
      "parameters": []
    },
    "/api/operations/{uuid}": {
      "delete": {
        "description": "Delete operation. ",
        "operationId": "delete",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Delete operation",
        "tags": [
          "Operations"
        ]
      },
      "get": {
        "description": "Get operation. ",
        "operationId": "getByUuid",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Operation Response",
                  "properties": {
                    "changed": {
                      "description": "When Aggregate was created",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "created": {
                      "description": "When Aggregate was created",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Operation"
                    },
                    "deleted": {
                      "description": "When Aggregate was created",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "number": {
                      "description": "Last event applied to aggregate (can be used as version)",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "type": {
                      "default": "Operation",
                      "description": "Operation Type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get operation",
        "tags": [
          "Operations"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "description": "Update operation. Only fields in request are applied to Operation. Other values remain unchanged.",
        "operationId": "update",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Operation"
              }
            }
          },
          "description": "Update Operation Request. Only fields in request are updated.",
          "required": true
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Update operation",
        "tags": [
          "Operations"
        ]
      }
    },
    "/api/operations/{uuid}/messages": {
      "get": {
        "description": "Get all messages. ",
        "operationId": "getAllMessage",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Entities Response",
                  "properties": {
                    "aggregate": {
                      "$ref": "#/components/schemas/AggregateRef"
                    },
                    "entries": {
                      "description": "Array of Messages",
                      "items": {
                        "$ref": "#/components/schemas/Message"
                      },
                      "readOnly": true,
                      "type": "array"
                    },
                    "limit": {
                      "description": "Message Page size",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "next": {
                      "description": "Next Message Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "offset": {
                      "description": "Message Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "path": {
                      "description": "Path to Entity Object List",
                      "readOnly": true,
                      "type": "string"
                    },
                    "total": {
                      "description": "Number of entities",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "type": {
                      "default": "Message",
                      "description": "Entity Object Type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get all messages",
        "tags": [
          "Operations > Messages"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Create message. The field [id] MUST BE unique for each Message. Use a [universally unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier).",
        "operationId": "createMessage",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Message"
              }
            }
          },
          "description": "New Message Request",
          "required": true
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Create message",
        "tags": [
          "Operations > Messages"
        ]
      }
    },
    "/api/operations/{uuid}/messages/{id}": {
      "delete": {
        "description": "Delete message. ",
        "operationId": "deleteMessage",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Delete message",
        "tags": [
          "Operations > Messages"
        ]
      },
      "get": {
        "description": "Get message. ",
        "operationId": "getByIdMessage",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Message Response",
                  "properties": {
                    "aggregate": {
                      "$ref": "#/components/schemas/AggregateRef"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Message"
                    },
                    "number": {
                      "description": "Last event applied to aggregate (can be used as version)",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "type": {
                      "default": "Message",
                      "description": "Message Type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get message",
        "tags": [
          "Operations > Messages"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "description": "Update message. Only fields in request are updated. Existing values WILL BE overwritten, others remain unchanged.",
        "operationId": "updateMessage",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Message"
              }
            }
          },
          "description": "Update Message Request. Only fields in request are updated.",
          "required": true
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Update message",
        "tags": [
          "Operations > Messages"
        ]
      }
    },
    "/api/operations/{uuid}/missions": {
      "get": {
        "description": "Get all missions",
        "operationId": "getMissions",
        "parameters": [
          {
            "description": "Operation uuid",
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Start with mission number equal to offset. Default is 0.",
            "in": "query",
            "name": "offset"
          },
          {
            "description": "Maximum number of mission to fetch. Default is 20.",
            "in": "query",
            "name": "limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Mission"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Successful response."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get all missions",
        "tags": [
          "Operations > Missions"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Create mission and add uuid to missions in Operation. Ids MUST BE unique for each mission. Use a [universally unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier).",
        "operationId": "createMissions",
        "parameters": [
          {
            "description": "Operation uuid",
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mission"
              }
            }
          },
          "description": "New Mission",
          "required": true
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Create mission and add uuid to missions in Operation",
        "tags": [
          "Operations > Missions"
        ]
      }
    },
    "/api/operations/{uuid}/objectives": {
      "get": {
        "description": "Get all objectives. ",
        "operationId": "getAllObjective",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Entities Response",
                  "properties": {
                    "aggregate": {
                      "$ref": "#/components/schemas/AggregateRef"
                    },
                    "entries": {
                      "description": "Array of Objectives",
                      "items": {
                        "$ref": "#/components/schemas/Objective"
                      },
                      "readOnly": true,
                      "type": "array"
                    },
                    "limit": {
                      "description": "Objective Page size",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "next": {
                      "description": "Next Objective Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "offset": {
                      "description": "Objective Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "path": {
                      "description": "Path to Entity Object List",
                      "readOnly": true,
                      "type": "string"
                    },
                    "total": {
                      "description": "Number of entities",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "type": {
                      "default": "Objective",
                      "description": "Entity Object Type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get all objectives",
        "tags": [
          "Operations > Objectives"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Create objective. The field [id] MUST BE unique for each Objective. Use a [universally unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier).",
        "operationId": "createObjective",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Objective"
              }
            }
          },
          "description": "New Objective Request",
          "required": true
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Create objective",
        "tags": [
          "Operations > Objectives"
        ]
      }
    },
    "/api/operations/{uuid}/objectives/{id}": {
      "delete": {
        "description": "Delete objective. ",
        "operationId": "deleteObjective",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Delete objective",
        "tags": [
          "Operations > Objectives"
        ]
      },
      "get": {
        "description": "Get objective. ",
        "operationId": "getByIdObjective",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Objective Response",
                  "properties": {
                    "aggregate": {
                      "$ref": "#/components/schemas/AggregateRef"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Objective"
                    },
                    "number": {
                      "description": "Last event applied to aggregate (can be used as version)",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "type": {
                      "default": "Objective",
                      "description": "Objective Type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get objective",
        "tags": [
          "Operations > Objectives"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "description": "Update objective. Only fields in request are updated. Existing values WILL BE overwritten, others remain unchanged.",
        "operationId": "updateObjective",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Objective"
              }
            }
          },
          "description": "Update Objective Request. Only fields in request are updated.",
          "required": true
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Update objective",
        "tags": [
          "Operations > Objectives"
        ]
      }
    },
    "/api/operations/{uuid}/personnels": {
      "delete": {
        "description": "Remove personnel fuuids from personnels in Operation. Ids MUST BE unique for each personnel. Use a [universally unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier).",
        "operationId": "removePersonnels",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AggregateList"
              }
            }
          },
          "description": "List of Aggregate Root fuuids",
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Remove personnel fuuids from personnels in Operation",
        "tags": [
          "Operations > Personnels"
        ]
      },
      "get": {
        "description": "Get all personnels",
        "operationId": "getPersonnels",
        "parameters": [
          {
            "description": "Operation uuid",
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Start with personnel number equal to offset. Default is 0.",
            "in": "query",
            "name": "offset"
          },
          {
            "description": "Maximum number of personnel to fetch. Default is 20.",
            "in": "query",
            "name": "limit"
          },
          {
            "description": "Match values with given string",
            "in": "query",
            "name": "filter"
          },
          {
            "description": "Only get aggregates in list of given comma-separated uuids. If filter is given, it is only applied on aggregates matching any uuids",
            "in": "query",
            "name": "uuids"
          },
          {
            "description": "Expand response with information from references. Legal values are: 'person'",
            "in": "query",
            "name": "expand"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Personnel"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Successful response."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get all personnels",
        "tags": [
          "Operations > Personnels"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "description": "Add personnel fuuids to personnels in Operation. Ids MUST BE unique for each personnel. Use a [universally unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier).",
        "operationId": "addPersonnels",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AggregateList"
              }
            }
          },
          "description": "List of Aggregate Root fuuids",
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Add personnel fuuids to personnels in Operation",
        "tags": [
          "Operations > Personnels"
        ]
      },
      "post": {
        "description": "Create personnel and add uuid to personnels in Operation. Ids MUST BE unique for each personnel. Use a [universally unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier).",
        "operationId": "createPersonnels",
        "parameters": [
          {
            "description": "Operation uuid",
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Personnel"
              }
            }
          },
          "description": "New Personnel",
          "required": true
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Create personnel and add uuid to personnels in Operation",
        "tags": [
          "Operations > Personnels"
        ]
      }
    },
    "/api/operations/{uuid}/talkgroups": {
      "get": {
        "description": "Get all talk groups. ",
        "operationId": "getAllTalkGroup",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Entities Response",
                  "properties": {
                    "aggregate": {
                      "$ref": "#/components/schemas/AggregateRef"
                    },
                    "entries": {
                      "description": "Array of TalkGroups",
                      "items": {
                        "$ref": "#/components/schemas/TalkGroup"
                      },
                      "readOnly": true,
                      "type": "array"
                    },
                    "limit": {
                      "description": "TalkGroup Page size",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "next": {
                      "description": "Next TalkGroup Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "offset": {
                      "description": "TalkGroup Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "path": {
                      "description": "Path to Entity Object List",
                      "readOnly": true,
                      "type": "string"
                    },
                    "total": {
                      "description": "Number of entities",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "type": {
                      "default": "TalkGroup",
                      "description": "Entity Object Type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get all talk groups",
        "tags": [
          "Operations > Talkgroups"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Create talk group. The field [id] MUST BE unique for each TalkGroup. Use a [universally unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier).",
        "operationId": "createTalkGroup",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TalkGroup"
              }
            }
          },
          "description": "New TalkGroup Request",
          "required": true
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Create talk group",
        "tags": [
          "Operations > Talkgroups"
        ]
      }
    },
    "/api/operations/{uuid}/talkgroups/{id}": {
      "delete": {
        "description": "Delete talk group. ",
        "operationId": "deleteTalkGroup",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Delete talk group",
        "tags": [
          "Operations > Talkgroups"
        ]
      },
      "get": {
        "description": "Get talk group. ",
        "operationId": "getByIdTalkGroup",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "TalkGroup Response",
                  "properties": {
                    "aggregate": {
                      "$ref": "#/components/schemas/AggregateRef"
                    },
                    "data": {
                      "$ref": "#/components/schemas/TalkGroup"
                    },
                    "number": {
                      "description": "Last event applied to aggregate (can be used as version)",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "type": {
                      "default": "TalkGroup",
                      "description": "TalkGroup Type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get talk group",
        "tags": [
          "Operations > Talkgroups"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "description": "Update talk group. Only fields in request are updated. Existing values WILL BE overwritten, others remain unchanged.",
        "operationId": "updateTalkGroup",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TalkGroup"
              }
            }
          },
          "description": "Update TalkGroup Request. Only fields in request are updated.",
          "required": true
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Update talk group",
        "tags": [
          "Operations > Talkgroups"
        ]
      }
    },
    "/api/operations/{uuid}/trackings": {
      "get": {
        "description": "Get all Trackings for given Operation uuid",
        "operationId": "getTracking",
        "parameters": [
          {
            "description": "Tracking uuid",
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Start with Tracking number equal to offset. Default is 0.",
            "in": "query",
            "name": "offset"
          },
          {
            "description": "Maximum number of Tracking to fetch. Default is 20.",
            "in": "query",
            "name": "limit"
          },
          {
            "description": "Array of trackable aggregate types. Allowed are [unit, personnel]",
            "in": "query",
            "name": "include"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Entities Response",
                  "properties": {
                    "entries": {
                      "description": "Array of Trackings",
                      "items": {
                        "description": "Tracking Response",
                        "properties": {
                          "changed": {
                            "description": "When Aggregate was created",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "created": {
                            "description": "When Aggregate was created",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "data": {
                            "$ref": "#/components/schemas/Tracking"
                          },
                          "deleted": {
                            "description": "When Aggregate was created",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "number": {
                            "description": "Last event applied to aggregate (can be used as version)",
                            "readOnly": true,
                            "type": "integer"
                          },
                          "type": {
                            "default": "Tracking",
                            "description": "Tracking Type",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "readOnly": true,
                        "type": "object"
                      },
                      "readOnly": true,
                      "type": "array"
                    },
                    "limit": {
                      "description": "Aggregate Page size",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "next": {
                      "description": "Next Aggregate Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "offset": {
                      "description": "Aggregate Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "total": {
                      "description": "Number of aggregates",
                      "readOnly": true,
                      "type": "integer"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get all Trackings for given Operation uuid",
        "tags": [
          "Operation > Trackings"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/operations/{uuid}/units": {
      "get": {
        "description": "Get all units",
        "operationId": "getUnits",
        "parameters": [
          {
            "description": "Operation uuid",
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Start with unit number equal to offset. Default is 0.",
            "in": "query",
            "name": "offset"
          },
          {
            "description": "Maximum number of unit to fetch. Default is 20.",
            "in": "query",
            "name": "limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Unit"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Successful response."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get all units",
        "tags": [
          "Operations > Units"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Create unit and add uuid to units in Operation. Ids MUST BE unique for each unit. Use a [universally unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier).",
        "operationId": "createUnits",
        "parameters": [
          {
            "description": "Operation uuid",
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Unit"
              }
            }
          },
          "description": "New Unit",
          "required": true
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Create unit and add uuid to units in Operation",
        "tags": [
          "Operations > Units"
        ]
      }
    },
    "/api/organisations": {
      "get": {
        "description": "Get all organisations. ",
        "operationId": "getAll",
        "parameters": [
          {
            "description": "Start with organisation number equal to offset. Default is 0.",
            "in": "query",
            "name": "offset"
          },
          {
            "description": "Maximum number of organisation to fetch. Default is 20.",
            "in": "query",
            "name": "limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Entities Response",
                  "properties": {
                    "entries": {
                      "description": "Array of Organisations",
                      "items": {
                        "description": "Organisation Response",
                        "properties": {
                          "changed": {
                            "description": "When Aggregate was created",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "created": {
                            "description": "When Aggregate was created",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "data": {
                            "$ref": "#/components/schemas/Organisation"
                          },
                          "deleted": {
                            "description": "When Aggregate was created",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "number": {
                            "description": "Last event applied to aggregate (can be used as version)",
                            "readOnly": true,
                            "type": "integer"
                          },
                          "type": {
                            "default": "Organisation",
                            "description": "Organisation Type",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "readOnly": true,
                        "type": "object"
                      },
                      "readOnly": true,
                      "type": "array"
                    },
                    "limit": {
                      "description": "Aggregate Page size",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "next": {
                      "description": "Next Aggregate Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "offset": {
                      "description": "Aggregate Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "total": {
                      "description": "Number of aggregates",
                      "readOnly": true,
                      "type": "integer"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get all organisations",
        "tags": [
          "Organisations"
        ]
      },
      "parameters": [],
      "post": {
        "description": "Create organisation. The field [uuid] MUST BE unique for each Organisation. Use a [universally unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier).",
        "operationId": "create",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Organisation"
              }
            }
          },
          "description": "New Organisation Request",
          "required": true
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Create organisation",
        "tags": [
          "Organisations"
        ]
      }
    },
    "/api/organisations/{uuid}": {
      "delete": {
        "description": "Delete organisation. ",
        "operationId": "delete",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Delete organisation",
        "tags": [
          "Organisations"
        ]
      },
      "get": {
        "description": "Get organisation. ",
        "operationId": "getByUuid",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Organisation Response",
                  "properties": {
                    "changed": {
                      "description": "When Aggregate was created",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "created": {
                      "description": "When Aggregate was created",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Organisation"
                    },
                    "deleted": {
                      "description": "When Aggregate was created",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "number": {
                      "description": "Last event applied to aggregate (can be used as version)",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "type": {
                      "default": "Organisation",
                      "description": "Organisation Type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get organisation",
        "tags": [
          "Organisations"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "description": "Update organisation. Only fields in request are applied to Organisation. Other values remain unchanged.",
        "operationId": "update",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Organisation"
              }
            }
          },
          "description": "Update Organisation Request. Only fields in request are updated.",
          "required": true
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Update organisation",
        "tags": [
          "Organisations"
        ]
      }
    },
    "/api/organisations/{uuid}/divisions": {
      "get": {
        "description": "Get all divisions",
        "operationId": "getDivisions",
        "parameters": [
          {
            "description": "Organisation uuid",
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Start with division number equal to offset. Default is 0.",
            "in": "query",
            "name": "offset"
          },
          {
            "description": "Maximum number of division to fetch. Default is 20.",
            "in": "query",
            "name": "limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Division"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Successful response."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get all divisions",
        "tags": [
          "Organisations"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Create division and add uuid to divisions in Organisation. Ids MUST BE unique for each division. Use a [universally unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier).",
        "operationId": "createDivisions",
        "parameters": [
          {
            "description": "Organisation uuid",
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Division"
              }
            }
          },
          "description": "New Division",
          "required": true
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Create division and add uuid to divisions in Organisation",
        "tags": [
          "Organisations"
        ]
      }
    },
    "/api/organisations/{uuid}/import": {
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "description": "Update division tree. If no aggregate uuid is supplied it is assumed that given aggregate does not exist and an uuid will be generated before creating it.An '409 Conflict' is returned if an aggregate in the import exist with same name as the imported aggregate within the same organisation tree. If an aggregate uuid is given, it is assumed to exist and will be updated if found. An '404 Not found' is returned if not found. If given aggregate belongs to another organisation an '400 Bad request' is returned.Use a [universally unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier).",
        "operationId": "importDivisions",
        "parameters": [
          {
            "description": "Organisation uuid",
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DivisionTree"
              }
            }
          },
          "description": "Import Division tree",
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/201"
          },
          "204": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Update division tree",
        "tags": [
          "Organisations"
        ]
      }
    },
    "/api/personnels": {
      "get": {
        "description": "Get all personnels. ",
        "operationId": "getAll",
        "parameters": [
          {
            "description": "Start with personnel number equal to offset. Default is 0.",
            "in": "query",
            "name": "offset"
          },
          {
            "description": "Maximum number of personnel to fetch. Default is 20.",
            "in": "query",
            "name": "limit"
          },
          {
            "description": "Expand response with information from references. Legal values are: 'person'",
            "in": "query",
            "name": "expand"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Entities Response",
                  "properties": {
                    "entries": {
                      "description": "Array of Personnels",
                      "items": {
                        "description": "Personnel Response",
                        "properties": {
                          "changed": {
                            "description": "When Aggregate was created",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "created": {
                            "description": "When Aggregate was created",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "data": {
                            "$ref": "#/components/schemas/Personnel"
                          },
                          "deleted": {
                            "description": "When Aggregate was created",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "number": {
                            "description": "Last event applied to aggregate (can be used as version)",
                            "readOnly": true,
                            "type": "integer"
                          },
                          "type": {
                            "default": "Personnel",
                            "description": "Personnel Type",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "readOnly": true,
                        "type": "object"
                      },
                      "readOnly": true,
                      "type": "array"
                    },
                    "limit": {
                      "description": "Aggregate Page size",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "next": {
                      "description": "Next Aggregate Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "offset": {
                      "description": "Aggregate Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "total": {
                      "description": "Number of aggregates",
                      "readOnly": true,
                      "type": "integer"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get all personnels",
        "tags": [
          "Personnels"
        ]
      },
      "parameters": []
    },
    "/api/personnels/{uuid}": {
      "delete": {
        "description": "Delete personnel. ",
        "operationId": "delete",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Delete personnel",
        "tags": [
          "Personnels"
        ]
      },
      "get": {
        "description": "Get personnel. ",
        "operationId": "getByUuid",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "allowEmptyValue": false,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Expand response with information from references. Legal values are: 'person'",
            "in": "query",
            "name": "expand"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Personnel Response",
                  "properties": {
                    "changed": {
                      "description": "When Aggregate was created",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "created": {
                      "description": "When Aggregate was created",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Personnel"
                    },
                    "deleted": {
                      "description": "When Aggregate was created",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "number": {
                      "description": "Last event applied to aggregate (can be used as version)",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "type": {
                      "default": "Personnel",
                      "description": "Personnel Type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get personnel",
        "tags": [
          "Personnels"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "description": "Update personnel. Only fields in request are applied to Personnel. Other values remain unchanged.",
        "operationId": "update",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Personnel"
              }
            }
          },
          "description": "Update Personnel Request. Only fields in request are updated.",
          "required": true
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Update personnel",
        "tags": [
          "Personnels"
        ]
      }
    },
    "/api/personnels/{uuid}/messages": {
      "get": {
        "description": "Get all messages. ",
        "operationId": "getAllMessage",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Entities Response",
                  "properties": {
                    "aggregate": {
                      "$ref": "#/components/schemas/AggregateRef"
                    },
                    "entries": {
                      "description": "Array of Messages",
                      "items": {
                        "$ref": "#/components/schemas/Message"
                      },
                      "readOnly": true,
                      "type": "array"
                    },
                    "limit": {
                      "description": "Message Page size",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "next": {
                      "description": "Next Message Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "offset": {
                      "description": "Message Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "path": {
                      "description": "Path to Entity Object List",
                      "readOnly": true,
                      "type": "string"
                    },
                    "total": {
                      "description": "Number of entities",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "type": {
                      "default": "Message",
                      "description": "Entity Object Type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get all messages",
        "tags": [
          "Personnels > Messages"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Create message. The field [id] MUST BE unique for each Message. Use a [universally unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier).",
        "operationId": "createMessage",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Message"
              }
            }
          },
          "description": "New Message Request",
          "required": true
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Create message",
        "tags": [
          "Personnels > Messages"
        ]
      }
    },
    "/api/personnels/{uuid}/messages/{id}": {
      "delete": {
        "description": "Delete message. ",
        "operationId": "deleteMessage",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Delete message",
        "tags": [
          "Personnels > Messages"
        ]
      },
      "get": {
        "description": "Get message. ",
        "operationId": "getByIdMessage",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Message Response",
                  "properties": {
                    "aggregate": {
                      "$ref": "#/components/schemas/AggregateRef"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Message"
                    },
                    "number": {
                      "description": "Last event applied to aggregate (can be used as version)",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "type": {
                      "default": "Message",
                      "description": "Message Type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get message",
        "tags": [
          "Personnels > Messages"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "description": "Update message. Only fields in request are updated. Existing values WILL BE overwritten, others remain unchanged.",
        "operationId": "updateMessage",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Message"
              }
            }
          },
          "description": "Update Message Request. Only fields in request are updated.",
          "required": true
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Update message",
        "tags": [
          "Personnels > Messages"
        ]
      }
    },
    "/api/persons": {
      "get": {
        "description": "Get all persons. ",
        "operationId": "getAll",
        "parameters": [
          {
            "description": "Start with person number equal to offset. Default is 0.",
            "in": "query",
            "name": "offset"
          },
          {
            "description": "Maximum number of person to fetch. Default is 20.",
            "in": "query",
            "name": "limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Entities Response",
                  "properties": {
                    "entries": {
                      "description": "Array of Persons",
                      "items": {
                        "description": "Person Response",
                        "properties": {
                          "changed": {
                            "description": "When Aggregate was created",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "created": {
                            "description": "When Aggregate was created",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "data": {
                            "$ref": "#/components/schemas/Person"
                          },
                          "deleted": {
                            "description": "When Aggregate was created",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "number": {
                            "description": "Last event applied to aggregate (can be used as version)",
                            "readOnly": true,
                            "type": "integer"
                          },
                          "type": {
                            "default": "Person",
                            "description": "Person Type",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "readOnly": true,
                        "type": "object"
                      },
                      "readOnly": true,
                      "type": "array"
                    },
                    "limit": {
                      "description": "Aggregate Page size",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "next": {
                      "description": "Next Aggregate Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "offset": {
                      "description": "Aggregate Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "total": {
                      "description": "Number of aggregates",
                      "readOnly": true,
                      "type": "integer"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get all persons",
        "tags": [
          "Persons"
        ]
      },
      "parameters": [],
      "post": {
        "description": "Create person. The field [uuid] MUST BE unique for each Person. Use a [universally unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier).",
        "operationId": "create",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Person"
              }
            }
          },
          "description": "New Person Request",
          "required": true
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Create person",
        "tags": [
          "Persons"
        ]
      }
    },
    "/api/persons/{uuid}": {
      "delete": {
        "description": "Delete person. ",
        "operationId": "delete",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Delete person",
        "tags": [
          "Persons"
        ]
      },
      "get": {
        "description": "Get person. ",
        "operationId": "getByUuid",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Person Response",
                  "properties": {
                    "changed": {
                      "description": "When Aggregate was created",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "created": {
                      "description": "When Aggregate was created",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Person"
                    },
                    "deleted": {
                      "description": "When Aggregate was created",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "number": {
                      "description": "Last event applied to aggregate (can be used as version)",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "type": {
                      "default": "Person",
                      "description": "Person Type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get person",
        "tags": [
          "Persons"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "description": "Update person. Only fields in request are applied to Person. Other values remain unchanged.",
        "operationId": "update",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Person"
              }
            }
          },
          "description": "Update Person Request. Only fields in request are updated.",
          "required": true
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Update person",
        "tags": [
          "Persons"
        ]
      }
    },
    "/api/subjects": {
      "get": {
        "description": "Get all subjects. ",
        "operationId": "getAll",
        "parameters": [
          {
            "description": "Start with subject number equal to offset. Default is 0.",
            "in": "query",
            "name": "offset"
          },
          {
            "description": "Maximum number of subject to fetch. Default is 20.",
            "in": "query",
            "name": "limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Entities Response",
                  "properties": {
                    "entries": {
                      "description": "Array of Subjects",
                      "items": {
                        "description": "Subject Response",
                        "properties": {
                          "changed": {
                            "description": "When Aggregate was created",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "created": {
                            "description": "When Aggregate was created",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "data": {
                            "$ref": "#/components/schemas/Subject"
                          },
                          "deleted": {
                            "description": "When Aggregate was created",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "number": {
                            "description": "Last event applied to aggregate (can be used as version)",
                            "readOnly": true,
                            "type": "integer"
                          },
                          "type": {
                            "default": "Subject",
                            "description": "Subject Type",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "readOnly": true,
                        "type": "object"
                      },
                      "readOnly": true,
                      "type": "array"
                    },
                    "limit": {
                      "description": "Aggregate Page size",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "next": {
                      "description": "Next Aggregate Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "offset": {
                      "description": "Aggregate Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "total": {
                      "description": "Number of aggregates",
                      "readOnly": true,
                      "type": "integer"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get all subjects",
        "tags": [
          "Subjects"
        ]
      },
      "parameters": []
    },
    "/api/subjects/{uuid}": {
      "delete": {
        "description": "Delete subject. ",
        "operationId": "delete",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Delete subject",
        "tags": [
          "Subjects"
        ]
      },
      "get": {
        "description": "Get subject. ",
        "operationId": "getByUuid",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Subject Response",
                  "properties": {
                    "changed": {
                      "description": "When Aggregate was created",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "created": {
                      "description": "When Aggregate was created",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Subject"
                    },
                    "deleted": {
                      "description": "When Aggregate was created",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "number": {
                      "description": "Last event applied to aggregate (can be used as version)",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "type": {
                      "default": "Subject",
                      "description": "Subject Type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get subject",
        "tags": [
          "Subjects"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "description": "Update subject. Only fields in request are applied to Subject. Other values remain unchanged.",
        "operationId": "update",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Subject"
              }
            }
          },
          "description": "Update Subject Request. Only fields in request are updated.",
          "required": true
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Update subject",
        "tags": [
          "Subjects"
        ]
      }
    },
    "/api/trackings": {
      "get": {
        "description": "Get all trackings. ",
        "operationId": "getAll",
        "parameters": [
          {
            "description": "Start with tracking number equal to offset. Default is 0.",
            "in": "query",
            "name": "offset"
          },
          {
            "description": "Maximum number of tracking to fetch. Default is 20.",
            "in": "query",
            "name": "limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Entities Response",
                  "properties": {
                    "entries": {
                      "description": "Array of Trackings",
                      "items": {
                        "description": "Tracking Response",
                        "properties": {
                          "changed": {
                            "description": "When Aggregate was created",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "created": {
                            "description": "When Aggregate was created",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "data": {
                            "$ref": "#/components/schemas/Tracking"
                          },
                          "deleted": {
                            "description": "When Aggregate was created",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "number": {
                            "description": "Last event applied to aggregate (can be used as version)",
                            "readOnly": true,
                            "type": "integer"
                          },
                          "type": {
                            "default": "Tracking",
                            "description": "Tracking Type",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "readOnly": true,
                        "type": "object"
                      },
                      "readOnly": true,
                      "type": "array"
                    },
                    "limit": {
                      "description": "Aggregate Page size",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "next": {
                      "description": "Next Aggregate Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "offset": {
                      "description": "Aggregate Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "total": {
                      "description": "Number of aggregates",
                      "readOnly": true,
                      "type": "integer"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get all trackings",
        "tags": [
          "Trackings"
        ]
      },
      "parameters": [],
      "post": {
        "description": "Create tracking. The field [uuid] MUST BE unique for each Tracking. Use a [universally unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier).",
        "operationId": "create",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tracking"
              }
            }
          },
          "description": "New Tracking Request",
          "required": true
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Create tracking",
        "tags": [
          "Trackings"
        ]
      }
    },
    "/api/trackings/{tuuid}/sources": {
      "get": {
        "description": "Get all sources. ",
        "operationId": "getAllSource",
        "parameters": [
          {
            "in": "path",
            "name": "tuuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Entities Response",
                  "properties": {
                    "aggregate": {
                      "$ref": "#/components/schemas/AggregateRef"
                    },
                    "entries": {
                      "description": "Array of Sources",
                      "items": {
                        "$ref": "#/components/schemas/Source"
                      },
                      "readOnly": true,
                      "type": "array"
                    },
                    "limit": {
                      "description": "Source Page size",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "next": {
                      "description": "Next Source Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "offset": {
                      "description": "Source Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "path": {
                      "description": "Path to Entity Object List",
                      "readOnly": true,
                      "type": "string"
                    },
                    "total": {
                      "description": "Number of entities",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "type": {
                      "default": "Source",
                      "description": "Entity Object Type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get all sources",
        "tags": [
          "Trackings > Sources"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "tuuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Create source. The field [id] MUST BE unique for each Source. Use a [universally unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier).",
        "operationId": "createSource",
        "parameters": [
          {
            "in": "path",
            "name": "tuuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Source"
              }
            }
          },
          "description": "New Source Request",
          "required": true
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Create source",
        "tags": [
          "Trackings > Sources"
        ]
      }
    },
    "/api/trackings/{tuuid}/sources/{suuid}": {
      "delete": {
        "description": "Delete source. ",
        "operationId": "deleteSource",
        "parameters": [
          {
            "in": "path",
            "name": "tuuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "suuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Delete source",
        "tags": [
          "Trackings > Sources"
        ]
      },
      "get": {
        "description": "Get source. ",
        "operationId": "getByIdSource",
        "parameters": [
          {
            "in": "path",
            "name": "tuuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "suuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Source Response",
                  "properties": {
                    "aggregate": {
                      "$ref": "#/components/schemas/AggregateRef"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Source"
                    },
                    "number": {
                      "description": "Last event applied to aggregate (can be used as version)",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "type": {
                      "default": "Source",
                      "description": "Source Type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get source",
        "tags": [
          "Trackings > Sources"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "tuuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "suuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/trackings/{uuid}": {
      "delete": {
        "description": "Delete tracking. ",
        "operationId": "delete",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Delete tracking",
        "tags": [
          "Trackings"
        ]
      },
      "get": {
        "description": "Get tracking. ",
        "operationId": "getByUuid",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Tracking Response",
                  "properties": {
                    "changed": {
                      "description": "When Aggregate was created",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "created": {
                      "description": "When Aggregate was created",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Tracking"
                    },
                    "deleted": {
                      "description": "When Aggregate was created",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "number": {
                      "description": "Last event applied to aggregate (can be used as version)",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "type": {
                      "default": "Tracking",
                      "description": "Tracking Type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get tracking",
        "tags": [
          "Trackings"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "description": "Update tracking. Only fields in request are applied to Tracking. Other values remain unchanged.",
        "operationId": "update",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tracking"
              }
            }
          },
          "description": "Update Tracking Request. Only fields in request are updated.",
          "required": true
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Update tracking",
        "tags": [
          "Trackings"
        ]
      }
    },
    "/api/trackings/{uuid}/status": {
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "description": "Update status. Only fields in request are updated. Existing values WILL BE overwritten, others remain unchanged.",
        "operationId": "transitionTrackingStatusRequest",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TrackingStatusRequest"
              }
            }
          },
          "description": "Update Tracking. Only field status is updated.",
          "required": true
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Update status",
        "tags": [
          "Trackings"
        ]
      }
    },
    "/api/trackings/{uuid}/tracks": {
      "get": {
        "description": "Get all tracks. ",
        "operationId": "getAllTrack",
        "parameters": [
          {
            "description": "Expand response with optional fields. Legal values are: 'positions'",
            "in": "query",
            "name": "expand"
          },
          {
            "description": "Options for fetching tracks. Legal values are: 'option=truncate:{value}:{unit}' (default is '-20:m'). Use 'truncate' limit number of positions in tracks where units are 'p' for positions, 'm' for minutes and 'h' for hours. If 'value' is negative, positions are truncated from head (last position).If 'value' is positive, positions are truncated from tail (first position).",
            "in": "query",
            "name": "option",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Entities Response",
                  "properties": {
                    "aggregate": {
                      "$ref": "#/components/schemas/AggregateRef"
                    },
                    "entries": {
                      "description": "Array of Tracks",
                      "items": {
                        "$ref": "#/components/schemas/Track"
                      },
                      "readOnly": true,
                      "type": "array"
                    },
                    "limit": {
                      "description": "Track Page size",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "next": {
                      "description": "Next Track Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "offset": {
                      "description": "Track Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "path": {
                      "description": "Path to Entity Object List",
                      "readOnly": true,
                      "type": "string"
                    },
                    "total": {
                      "description": "Number of entities",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "type": {
                      "default": "Track",
                      "description": "Entity Object Type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get all tracks",
        "tags": [
          "Trackings > Tracks"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/trackings/{uuid}/tracks/{id}": {
      "get": {
        "description": "Get track. ",
        "operationId": "getByIdTrack",
        "parameters": [
          {
            "description": "Options for fetching tracks. Legal values are: 'option=truncate:{value}:{unit}' (default is '-20:m'). Use 'truncate' limit number of positions in tracks where units are 'p' for positions, 'm' for minutes and 'h' for hours. If 'value' is negative, positions are truncated from head (last position).If 'value' is positive, positions are truncated from tail (first position).",
            "in": "query",
            "name": "option",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Track Response",
                  "properties": {
                    "aggregate": {
                      "$ref": "#/components/schemas/AggregateRef"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Track"
                    },
                    "number": {
                      "description": "Last event applied to aggregate (can be used as version)",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "type": {
                      "default": "Track",
                      "description": "Track Type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get track",
        "tags": [
          "Trackings > Tracks"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/trackings/{uuid}/tracks/{id}/positions": {
      "get": {
        "description": "Get tracks/positions. ",
        "operationId": "getPagedPosition",
        "parameters": [
          {
            "description": "Start with position at given offset. Default is 0.",
            "in": "query",
            "name": "offset"
          },
          {
            "description": "Maximum number of positions to fetch. Default is 20.",
            "in": "query",
            "name": "limit"
          },
          {
            "description": "Options for fetching tracks. Legal values are: 'option=truncate:{value}:{unit}' (default is '-20:m'). Use 'truncate' limit number of positions in tracks where units are 'p' for positions, 'm' for minutes and 'h' for hours. If 'value' is negative, positions are truncated from head (last position).If 'value' is positive, positions are truncated from tail (first position).",
            "in": "query",
            "name": "option",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PositionListResponse"
                }
              }
            },
            "description": "Successful response"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get tracks/positions",
        "tags": [
          "Trackings > Tracks"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/units": {
      "get": {
        "description": "Get all units. ",
        "operationId": "getAll",
        "parameters": [
          {
            "description": "Start with unit number equal to offset. Default is 0.",
            "in": "query",
            "name": "offset"
          },
          {
            "description": "Maximum number of unit to fetch. Default is 20.",
            "in": "query",
            "name": "limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Entities Response",
                  "properties": {
                    "entries": {
                      "description": "Array of Units",
                      "items": {
                        "description": "Unit Response",
                        "properties": {
                          "changed": {
                            "description": "When Aggregate was created",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "created": {
                            "description": "When Aggregate was created",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "data": {
                            "$ref": "#/components/schemas/Unit"
                          },
                          "deleted": {
                            "description": "When Aggregate was created",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "number": {
                            "description": "Last event applied to aggregate (can be used as version)",
                            "readOnly": true,
                            "type": "integer"
                          },
                          "type": {
                            "default": "Unit",
                            "description": "Unit Type",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "readOnly": true,
                        "type": "object"
                      },
                      "readOnly": true,
                      "type": "array"
                    },
                    "limit": {
                      "description": "Aggregate Page size",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "next": {
                      "description": "Next Aggregate Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "offset": {
                      "description": "Aggregate Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "total": {
                      "description": "Number of aggregates",
                      "readOnly": true,
                      "type": "integer"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get all units",
        "tags": [
          "Units"
        ]
      },
      "parameters": []
    },
    "/api/units/{uuid}": {
      "delete": {
        "description": "Delete unit. ",
        "operationId": "delete",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Delete unit",
        "tags": [
          "Units"
        ]
      },
      "get": {
        "description": "Get unit. ",
        "operationId": "getByUuid",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Unit Response",
                  "properties": {
                    "changed": {
                      "description": "When Aggregate was created",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "created": {
                      "description": "When Aggregate was created",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Unit"
                    },
                    "deleted": {
                      "description": "When Aggregate was created",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "number": {
                      "description": "Last event applied to aggregate (can be used as version)",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "type": {
                      "default": "Unit",
                      "description": "Unit Type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get unit",
        "tags": [
          "Units"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "description": "Update unit. Only fields in request are applied to Unit. Other values remain unchanged.",
        "operationId": "update",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Unit"
              }
            }
          },
          "description": "Update Unit Request. Only fields in request are updated.",
          "required": true
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Update unit",
        "tags": [
          "Units"
        ]
      }
    },
    "/api/units/{uuid}/messages": {
      "get": {
        "description": "Get all messages. ",
        "operationId": "getAllMessage",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Entities Response",
                  "properties": {
                    "aggregate": {
                      "$ref": "#/components/schemas/AggregateRef"
                    },
                    "entries": {
                      "description": "Array of Messages",
                      "items": {
                        "$ref": "#/components/schemas/Message"
                      },
                      "readOnly": true,
                      "type": "array"
                    },
                    "limit": {
                      "description": "Message Page size",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "next": {
                      "description": "Next Message Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "offset": {
                      "description": "Message Page offset",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "path": {
                      "description": "Path to Entity Object List",
                      "readOnly": true,
                      "type": "string"
                    },
                    "total": {
                      "description": "Number of entities",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "type": {
                      "default": "Message",
                      "description": "Entity Object Type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get all messages",
        "tags": [
          "Units > Messages"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Create message. The field [id] MUST BE unique for each Message. Use a [universally unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier).",
        "operationId": "createMessage",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Message"
              }
            }
          },
          "description": "New Message Request",
          "required": true
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Create message",
        "tags": [
          "Units > Messages"
        ]
      }
    },
    "/api/units/{uuid}/messages/{id}": {
      "delete": {
        "description": "Delete message. ",
        "operationId": "deleteMessage",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Delete message",
        "tags": [
          "Units > Messages"
        ]
      },
      "get": {
        "description": "Get message. ",
        "operationId": "getByIdMessage",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Message Response",
                  "properties": {
                    "aggregate": {
                      "$ref": "#/components/schemas/AggregateRef"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Message"
                    },
                    "number": {
                      "description": "Last event applied to aggregate (can be used as version)",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "type": {
                      "default": "Message",
                      "description": "Message Type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get message",
        "tags": [
          "Units > Messages"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "description": "Update message. Only fields in request are updated. Existing values WILL BE overwritten, others remain unchanged.",
        "operationId": "updateMessage",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Message"
              }
            }
          },
          "description": "Update Message Request. Only fields in request are updated.",
          "required": true
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Update message",
        "tags": [
          "Units > Messages"
        ]
      }
    },
    "/api/units/{uuid}/personnels": {
      "delete": {
        "description": "Remove personnel fuuids from personnels in Unit. Ids MUST BE unique for each personnel. Use a [universally unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier).",
        "operationId": "removePersonnels",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AggregateList"
              }
            }
          },
          "description": "List of Aggregate Root fuuids",
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Remove personnel fuuids from personnels in Unit",
        "tags": [
          "Units > Personnels"
        ]
      },
      "get": {
        "description": "Get all personnels",
        "operationId": "getPersonnels",
        "parameters": [
          {
            "description": "Unit uuid",
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Start with personnel number equal to offset. Default is 0.",
            "in": "query",
            "name": "offset"
          },
          {
            "description": "Maximum number of personnel to fetch. Default is 20.",
            "in": "query",
            "name": "limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Personnel"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Successful response."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Get all personnels",
        "tags": [
          "Units > Personnels"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uuid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "description": "Add personnel fuuids to personnels in Unit. Ids MUST BE unique for each personnel. Use a [universally unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier).",
        "operationId": "addPersonnels",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AggregateList"
              }
            }
          },
          "description": "List of Aggregate Root fuuids",
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "summary": "Add personnel fuuids to personnels in Unit",
        "tags": [
          "Units > Personnels"
        ]
      }
    },
    "/api/{path}": {
      "get": {
        "description": "Content-Type is determined by the suffix of the file.",
        "operationId": "getFile",
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "Successful file fetch."
          },
          "404": {
            "description": "No file exists at path."
          }
        },
        "summary": "Returns the contents of a file on the server's filesystem.",
        "tags": [
          "System"
        ]
      },
      "parameters": [
        {
          "description": "This path variable may contain slashes '/' and may be empty.",
          "in": "path",
          "name": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    }
  },
  "servers": [
    {
      "url": "https://sarsys.app"
    },
    {
      "url": "http://localhost"
    }
  ]
}
