{
  "openapi": "3.0.0",
  "info": {
    "title": "SarSys App Server",
    "description": "API consumed by SarSys apps",
    "version": "0.0.1"
  },
  "servers": [
    {
      "url": "https://sarsys.app"
    },
    {
      "url": "http://localhost"
    }
  ],
  "paths": {
    "/": {
      "parameters": []
    },
    "/api/{path}": {
      "parameters": [
        {
          "name": "path",
          "description": "This path variable may contain slashes '/' and may be empty.",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Returns the contents of a file on the server's filesystem.",
        "description": "Content-Type is determined by the suffix of the file.",
        "operationId": "getFile",
        "responses": {
          "200": {
            "description": "Successful file fetch.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "No file exists at path."
          }
        }
      }
    },
    "/api/healthz": {
      "parameters": [],
      "get": {
        "tags": [
          "Health"
        ],
        "operationId": "check",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response."
          }
        }
      }
    },
    "/api/messages/connect": {
      "parameters": []
    },
    "/api/app-configs": {
      "parameters": [],
      "get": {
        "tags": [
          "AppConfig"
        ],
        "summary": "Get all appconfigs",
        "description": "Get all appconfigs. This operation is only allowed for admin users.",
        "operationId": "getAll",
        "parameters": [
          {
            "name": "offset",
            "description": "Start with [AppConfig] number equal to offset. Default is 0.",
            "in": "query"
          },
          {
            "name": "limit",
            "description": "Maximum number of [AppConfig] to fetch. Default is 20.",
            "in": "query"
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppConfig"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "AppConfig"
        ],
        "summary": "Create appconfig",
        "description": "Create appconfig. The field [uuid] MUST BE unique for each application. Use a OS-spesific device id or a [universally unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier).",
        "operationId": "post",
        "parameters": [],
        "requestBody": {
          "description": "New AppConfig",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppConfig"
              }
            }
          }
        },
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "201": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/api/app-configs/{uuid}": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": [
          "AppConfig"
        ],
        "summary": "Get appconfig",
        "description": "Get appconfig. A configuration is unique for each application regardless of which user is logged in.",
        "operationId": "getByUuid",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppConfig"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "AppConfig"
        ],
        "summary": "Update appconfig",
        "description": "Update appconfig. Only fields in request are updated. Existing values WILL BE overwritten, others remain unchanged.",
        "operationId": "patch",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update AppConfig. Only fields in request are updated.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppConfig"
              }
            }
          }
        },
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/api/incidents": {
      "parameters": [],
      "get": {
        "tags": [
          "Incident"
        ],
        "summary": "Get all incidents",
        "description": "Get all incidents.  Users with an admin role will get all incidents containing all available fields. All other roles will get incidents based on affiliation. Which fields each incident contains is based on given passcode. All available fields are only returned for incidents  with passcode which match the value given in header 'X-Passcode'. Rquests without header 'X-Passcode', or with an invalid passcode, will get incidents containing fields [uuid] and [name] only. Brute-force attacks are banned for a lmitied time without any feedback. When banned, all incidents will contain fields [uuid] and [name] only, regardless of the value in 'X-Passcode'.",
        "operationId": "getAll",
        "parameters": [
          {
            "name": "offset",
            "description": "Start with [Incident] number equal to offset. Default is 0.",
            "in": "query"
          },
          {
            "name": "limit",
            "description": "Maximum number of [Incident] to fetch. Default is 20.",
            "in": "query"
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Incident"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Incident"
        ],
        "summary": "Create incident",
        "description": "Create incident. ",
        "operationId": "post",
        "parameters": [],
        "requestBody": {
          "description": "New Incident",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Incident"
              }
            }
          }
        },
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "201": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/api/incidents/{uuid}": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": [
          "Incident"
        ],
        "summary": "Get incident",
        "description": "Get incident.  Users with an admin role will get all incidents containing all available fields. All other roles will get incidents based on affiliation. Which fields each incident contains is based on given passcode. All available fields are only returned for incidents  with passcode which match the value given in header 'X-Passcode'. Rquests without header 'X-Passcode', or with an invalid passcode, will get incidents containing fields [uuid] and [name] only. Brute-force attacks are banned for a lmitied time without any feedback. When banned, all incidents will contain fields [uuid] and [name] only, regardless of the value in 'X-Passcode'.",
        "operationId": "getByUuid",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incident"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Incident"
        ],
        "summary": "Update incident",
        "description": "Update incident. ",
        "operationId": "patch",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update Incident. Only fields in request are updated.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Incident"
              }
            }
          }
        },
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/api/incidents/{uuid}/subjects": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": [
          "Subject"
        ],
        "summary": "Get subject",
        "description": "Get subject.  Users with an admin role will get all incidents containing all available fields. All other roles will get incidents based on affiliation. Which fields each incident contains is based on given passcode. All available fields are only returned for incidents  with passcode which match the value given in header 'X-Passcode'. Rquests without header 'X-Passcode', or with an invalid passcode, will get incidents containing fields [uuid] and [name] only. Brute-force attacks are banned for a lmitied time without any feedback. When banned, all incidents will contain fields [uuid] and [name] only, regardless of the value in 'X-Passcode'.",
        "operationId": "getAll",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subject"
                }
              }
            }
          }
        }
      }
    },
    "/api/incidents/{uuid}/subjects/{id}": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": [
          "Subject"
        ],
        "summary": "Get subject",
        "description": "Get subject.  Users with an admin role will get all incidents containing all available fields. All other roles will get incidents based on affiliation. Which fields each incident contains is based on given passcode. All available fields are only returned for incidents  with passcode which match the value given in header 'X-Passcode'. Rquests without header 'X-Passcode', or with an invalid passcode, will get incidents containing fields [uuid] and [name] only. Brute-force attacks are banned for a lmitied time without any feedback. When banned, all incidents will contain fields [uuid] and [name] only, regardless of the value in 'X-Passcode'.",
        "operationId": "getById",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subject"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Subject"
        ],
        "summary": "Create subject",
        "description": "Create subject. ",
        "operationId": "post",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "New Subject",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Subject"
              }
            }
          }
        },
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "201": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "patch": {
        "tags": [
          "Subject"
        ],
        "summary": "Update subject",
        "description": "Update subject. ",
        "operationId": "patch",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Update Subject. Only fields in request are updated.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Subject"
              }
            }
          }
        },
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/api/operations": {
      "parameters": [],
      "get": {
        "tags": [
          "Operation"
        ],
        "summary": "Get all operations",
        "description": "Get all operations.  Users with an admin role are allowed to get all operations. All other roles will get access to operations based on given passcodes. All available fields are only returned for operations with passcode which match the value given in header 'X-Passcode'. Rquests without header 'X-Passcode', or with an invalid passcode, will get operations containing fields [uuid] and [name] only. Brute-force attacks are banned for a lmitied time without any feedback. When banned, all operations will contain fields [uuid] and [name] only, regardless of the value in 'X-Passcode'.",
        "operationId": "getAll",
        "parameters": [
          {
            "name": "offset",
            "description": "Start with [Operation] number equal to offset. Default is 0.",
            "in": "query"
          },
          {
            "name": "limit",
            "description": "Maximum number of [Operation] to fetch. Default is 20.",
            "in": "query"
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Operation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Operation"
        ],
        "summary": "Create operation",
        "description": "Create operation. ",
        "operationId": "post",
        "parameters": [],
        "requestBody": {
          "description": "New Operation",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Operation"
              }
            }
          }
        },
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "201": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/api/operations/{uuid}": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": [
          "Operation"
        ],
        "summary": "Get operation",
        "description": "Get operation.  Users with an admin role are allowed to get all operations. All other roles will get access to operations based on given passcodes. All available fields are only returned for operations with passcode which match the value given in header 'X-Passcode'. Rquests without header 'X-Passcode', or with an invalid passcode, will get operations containing fields [uuid] and [name] only. Brute-force attacks are banned for a lmitied time without any feedback. When banned, all operations will contain fields [uuid] and [name] only, regardless of the value in 'X-Passcode'.",
        "operationId": "getByUuid",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Operation"
        ],
        "summary": "Update operation",
        "description": "Update operation. ",
        "operationId": "patch",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update Operation. Only fields in request are updated.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Operation"
              }
            }
          }
        },
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/api/units": {
      "parameters": [],
      "get": {
        "tags": [
          "Unit"
        ],
        "summary": "Get all units",
        "description": "Get all units.  Users with an admin role are allowed to get all units. All other roles will get access to units based on given passcodes. All available fields are only returned for units with passcode which match the value given in header 'X-Passcode'. Rquests without header 'X-Passcode', or with an invalid passcode, will get units containing fields [uuid] and [name] only. Brute-force attacks are banned for a lmitied time without any feedback. When banned, all units will contain fields [uuid] and [name] only, regardless of the value in 'X-Passcode'.",
        "operationId": "getAll",
        "parameters": [
          {
            "name": "offset",
            "description": "Start with [Unit] number equal to offset. Default is 0.",
            "in": "query"
          },
          {
            "name": "limit",
            "description": "Maximum number of [Unit] to fetch. Default is 20.",
            "in": "query"
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Unit"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Unit"
        ],
        "summary": "Create unit",
        "description": "Create unit. ",
        "operationId": "post",
        "parameters": [],
        "requestBody": {
          "description": "New Unit",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Unit"
              }
            }
          }
        },
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "201": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/api/units/{uuid}": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": [
          "Unit"
        ],
        "summary": "Get unit",
        "description": "Get unit.  Users with an admin role are allowed to get all units. All other roles will get access to units based on given passcodes. All available fields are only returned for units with passcode which match the value given in header 'X-Passcode'. Rquests without header 'X-Passcode', or with an invalid passcode, will get units containing fields [uuid] and [name] only. Brute-force attacks are banned for a lmitied time without any feedback. When banned, all units will contain fields [uuid] and [name] only, regardless of the value in 'X-Passcode'.",
        "operationId": "getByUuid",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Unit"
        ],
        "summary": "Update unit",
        "description": "Update unit. ",
        "operationId": "patch",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update Unit. Only fields in request are updated.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Unit"
              }
            }
          }
        },
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "PassCodes": {
        "required": [
          "commander",
          "personnel"
        ],
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "commander": {
            "type": "string",
            "description": "Passcode for access with Commander rights"
          },
          "personnel": {
            "type": "string",
            "description": "Passcode for access with Personnel rights"
          }
        },
        "description": "Pass codes for access rights to spesific Incident instance"
      },
      "AppConfig": {
        "required": [
          "uuid"
        ],
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Unique application id",
            "format": "uuid"
          },
          "demo": {
            "type": "boolean",
            "description": "Use demo-mode (no real data and any login)",
            "default": true
          },
          "demoRole": {
            "enum": [
              "commander",
              "unitleader",
              "personnel"
            ],
            "type": "string",
            "description": "Role of logged in user in demo-mode",
            "default": "Commander"
          },
          "onboarding": {
            "type": "boolean",
            "description": "Show onboarding before next login",
            "default": true
          },
          "organization": {
            "type": "string",
            "description": "Default organization identifier",
            "default": "61"
          },
          "division": {
            "type": "string",
            "description": "Default division identifier",
            "default": "140"
          },
          "department": {
            "type": "string",
            "description": "Default department identifier",
            "default": "141"
          },
          "talkGroupCatalog": {
            "type": "string",
            "description": "Default talkgroup name",
            "default": "Oslo"
          },
          "storage": {
            "type": "boolean",
            "description": "Storage access is granted",
            "default": false
          },
          "locationWhenInUse": {
            "type": "boolean",
            "description": "Location access when app is in use is granted",
            "default": false
          },
          "mapCacheTTL": {
            "type": "integer",
            "description": "Number of days downloaded map tiles are cached locally",
            "default": 30
          },
          "mapCacheCapacity": {
            "type": "integer",
            "description": "Maximum number map tiles cached locally",
            "default": 15000
          },
          "locationAccuracy": {
            "enum": [
              "lowest",
              "low",
              "medium",
              "high",
              "best",
              "bestForNavigation"
            ],
            "type": "string",
            "description": "Requested location accuracy",
            "default": "high"
          },
          "locationFastestInterval": {
            "type": "integer",
            "description": "Fastest interval between location updates in milliseconds",
            "default": 1000
          },
          "locationSmallestDisplacement": {
            "type": "integer",
            "description": "Smallest displacment in meters before update is received",
            "default": 3
          },
          "keepScreenOn": {
            "type": "boolean",
            "description": "Keep screen on when maps are displayed",
            "default": false
          },
          "callsignReuse": {
            "type": "boolean",
            "description": "Reuse callsigns for retired units",
            "default": true
          },
          "sentryDns": {
            "type": "string",
            "description": "Sentry DNS for remote error reporting",
            "format": "uri",
            "default": "https://2d6130375010466b9652b9e9efc415cc@sentry.io/1523681"
          }
        },
        "description": "SarSys application configuration"
      },
      "Incident": {
        "required": [
          "uuid",
          "name",
          "summary",
          "type",
          "status",
          "resolution",
          "occured"
        ],
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Unique incident id",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name of incident scene"
          },
          "summary": {
            "type": "string",
            "description": "Situation summary"
          },
          "type": {
            "enum": [
              "lost",
              "distress",
              "disaster",
              "other"
            ],
            "type": "string",
            "description": "Incident type"
          },
          "status": {
            "enum": [
              "registered",
              "handling",
              "closed"
            ],
            "type": "string",
            "description": "Incident status",
            "default": "registered"
          },
          "resolution": {
            "enum": [
              "unresolved",
              "cancelled",
              "duplicate",
              "resolved"
            ],
            "type": "string",
            "description": "Incident resolution",
            "default": "unresolved"
          },
          "transitions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "status": {
                  "enum": [
                    "registered",
                    "handling",
                    "closed"
                  ],
                  "type": "string",
                  "description": "Incident status",
                  "default": "registered"
                },
                "resolution": {
                  "enum": [
                    "unresolved",
                    "cancelled",
                    "duplicate",
                    "resolved"
                  ],
                  "type": "string",
                  "description": "Incident resolution",
                  "default": "unresolved"
                },
                "timestamp": {
                  "type": "string",
                  "description": "When transition occured",
                  "format": "date-time"
                }
              }
            },
            "additionalProperties": false,
            "description": "State transitions (read only)",
            "readOnly": true
          },
          "occurred": {
            "type": "string",
            "description": "When Incident occurred",
            "format": "date-time"
          },
          "clues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Clue"
            },
            "description": "List of Clues for planning and response"
          },
          "subjects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Subject"
            },
            "description": "List of Subjects involved in the incident"
          },
          "passcodes": {
            "$ref": "#/components/schemas/PassCodes"
          }
        }
      },
      "Clue": {
        "required": [
          "name",
          "type",
          "quality"
        ],
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "description": "Clue id (unique in Incident only)"
          },
          "name": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Point"
            },
            "description": "Clue name"
          },
          "description": {
            "type": "string",
            "description": "Clue description"
          },
          "type": {
            "enum": [
              "find",
              "condition",
              "observation",
              "circumstance"
            ],
            "type": "string",
            "description": "Clue type"
          },
          "quality": {
            "enum": [
              "confirmed",
              "plausable",
              "possible",
              "unlikely",
              "rejected"
            ],
            "type": "string",
            "description": "Clue quality assessment"
          },
          "location": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Location"
            },
            "description": "Rescue or assitance location"
          }
        },
        "description": "Objective Schema"
      },
      "Subject": {
        "required": [
          "name",
          "type",
          "situation",
          "location"
        ],
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "description": "Subject id (unique in Incident only)"
          },
          "name": {
            "type": "string",
            "description": "Subject name"
          },
          "situation": {
            "type": "string",
            "description": "Subject situation"
          },
          "type": {
            "enum": [
              "person",
              "vehicle",
              "other"
            ],
            "type": "string",
            "description": "Subject type"
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          }
        },
        "description": "Objective Schema"
      },
      "Operation": {
        "required": [
          "uuid",
          "incidentUuid",
          "name",
          "type",
          "ipp",
          "meetup",
          "justification"
        ],
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Unique Operation uuid",
            "format": "uuid"
          },
          "incidentUuid": {
            "type": "string",
            "description": "Uuid of Incident this Operation is a response to",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name of operation scene"
          },
          "type": {
            "enum": [
              "search",
              "rescue",
              "other"
            ],
            "type": "string",
            "description": "Operation type"
          },
          "status": {
            "enum": [
              "planned",
              "enroute",
              "onscene",
              "finished"
            ],
            "type": "string",
            "description": "Operation status",
            "default": "planned"
          },
          "resolution": {
            "enum": [
              "unresolved",
              "cancelled",
              "duplicate",
              "resolved"
            ],
            "type": "string",
            "description": "Operation resolution",
            "default": "unresolved"
          },
          "transitions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "status": {
                  "enum": [
                    "planned",
                    "enroute",
                    "onscene",
                    "finished"
                  ],
                  "type": "string",
                  "description": "Operation status",
                  "default": "planned"
                },
                "resolution": {
                  "enum": [
                    "unresolved",
                    "cancelled",
                    "duplicate",
                    "resolved"
                  ],
                  "type": "string",
                  "description": "Operation resolution",
                  "default": "unresolved"
                },
                "timestamp": {
                  "type": "string",
                  "description": "When transition occured",
                  "format": "date-time"
                }
              }
            },
            "additionalProperties": false,
            "description": "State transitions (read only)",
            "readOnly": true
          },
          "reference": {
            "type": "string",
            "description": "External reference from requesting authority"
          },
          "justification": {
            "type": "string",
            "description": "Justification for responding"
          },
          "talkGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TalkGroup"
            },
            "description": "List of talk gropus in use"
          },
          "ipp": {
            "$ref": "#/components/schemas/Location"
          },
          "meetup": {
            "$ref": "#/components/schemas/Location"
          },
          "objectives": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Objective"
            },
            "description": "List of Operation objectives"
          },
          "passcodes": {
            "$ref": "#/components/schemas/PassCodes"
          }
        }
      },
      "Point": {
        "required": [
          "lat",
          "lon",
          "timestamp"
        ],
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "lat": {
            "type": "number",
            "description": "Latitude in decimal degrees"
          },
          "lon": {
            "type": "number",
            "description": "Longitude in decimal degrees"
          },
          "alt": {
            "type": "number",
            "description": "Altitude above sea level in meters"
          },
          "acc": {
            "type": "number",
            "description": "Accuracy in meters"
          },
          "timestamp": {
            "type": "string",
            "description": "Timestamp in ISO8601 Date Time String Format",
            "format": "date-time"
          },
          "type": {
            "enum": [
              "manual",
              "device",
              "personnel",
              "aggregated"
            ],
            "type": "string",
            "description": "Point type"
          }
        },
        "description": "Point Schema (value object)"
      },
      "Address": {
        "required": [
          "lat",
          "lon",
          "timestamp"
        ],
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "lines": {
            "type": "string",
            "items": {
              "type": "string"
            },
            "description": "Pass codes for authorizing access to Operation data"
          },
          "city": {
            "type": "string",
            "description": "City name"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal, state or zip code"
          },
          "countryCode": {
            "type": "string",
            "description": "ISO 3166 country code"
          }
        },
        "description": "Point Schema (value object)"
      },
      "TalkGroup": {
        "required": [
          "name",
          "type"
        ],
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "boolean",
            "description": "Talkgroup identifier"
          },
          "type": {
            "enum": [
              "tetra",
              "marine",
              "analog"
            ],
            "type": "string",
            "description": "Talkgroup type"
          }
        },
        "description": "TalkGroup Schema (value object)"
      },
      "Location": {
        "required": [
          "point"
        ],
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "point": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Point"
            },
            "description": "Location position"
          },
          "address": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Address"
            },
            "description": "Location address"
          },
          "description": {
            "type": "string",
            "description": "Location description"
          }
        },
        "description": "Location Schema (value object)"
      },
      "Objective": {
        "required": [
          "name",
          "type",
          "resolution"
        ],
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "description": "Objective id (unique in Operation only)"
          },
          "name": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Point"
            },
            "description": "Objective name"
          },
          "description": {
            "type": "string",
            "description": "Objective description"
          },
          "type": {
            "enum": [
              "locate",
              "rescue",
              "assist"
            ],
            "type": "string",
            "description": "Objective type"
          },
          "location": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Location"
            },
            "description": "Rescue or assitance location"
          },
          "resolution": {
            "enum": [
              "unresolved",
              "cancelled",
              "duplicate",
              "resolved"
            ],
            "type": "string",
            "description": "Objective resolution",
            "default": "unresolved"
          }
        },
        "description": "Objective Schema (entity object)"
      },
      "Unit": {
        "required": [
          "uuid",
          "operationUuid",
          "number",
          "type",
          "callsign"
        ],
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Unique unit id",
            "format": "uuid"
          },
          "operationUuid": {
            "type": "string",
            "description": "Uuid of Operation which this Unit is mobilized for",
            "format": "uuid"
          },
          "number": {
            "type": "integer",
            "description": "Unit number"
          },
          "type": {
            "enum": [
              "team",
              "k9",
              "boat",
              "vehicle",
              "snowmobile",
              "atv",
              "commandpost",
              "other"
            ],
            "type": "string",
            "description": "Unit type"
          },
          "status": {
            "enum": [
              "mobilized",
              "deployed",
              "retired"
            ],
            "type": "string",
            "description": "Unit status",
            "default": "mobilized"
          },
          "transitions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "status": {
                  "enum": [
                    "mobilized",
                    "deployed",
                    "retired"
                  ],
                  "type": "string",
                  "description": "Unit status",
                  "default": "mobilized"
                },
                "timestamp": {
                  "type": "string",
                  "description": "When transition occured",
                  "format": "date-time"
                }
              }
            },
            "additionalProperties": false,
            "description": "State transitions (read only)",
            "readOnly": true
          },
          "phone": {
            "type": "string",
            "description": "Phone number"
          },
          "callsign": {
            "type": "string",
            "description": "Unit callsign"
          },
          "personnel": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of uuid of Personnel assigned to this unit",
            "format": "uuid"
          }
        }
      }
    },
    "responses": {
      "201": {
        "description": "Created. The POST-ed resource was created."
      },
      "204": {
        "description": "No Content. The resource was updated."
      },
      "400": {
        "description": "Bad request. Request contains wrong or is missing required data"
      },
      "401": {
        "description": "Unauthorized. The client must authenticate itself to get the requested response."
      },
      "403": {
        "description": "Forbidden. The client does not have access rights to the content."
      },
      "404": {
        "description": "Not found. The requested resource does not exist in server."
      },
      "405": {
        "description": "Method Not Allowed. The request method is known by the server but has been disabled and cannot be used."
      },
      "409": {
        "description": "Conflict. This response is sent when a request conflicts with the current state of the server."
      },
      "503": {
        "description": "Service unavailable. The server is not ready to handle the request. Common causes are a server that is down for maintenance or that is overloaded."
      },
      "InsufficientScope": {
        "description": "The provided credentials or bearer token have insufficient permission to access this route.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                },
                "scope": {
                  "type": "string",
                  "description": "The required scope for this operation."
                }
              }
            }
          }
        }
      },
      "InsufficientAccess": {
        "description": "The provided credentials or bearer token are not authorized for this request.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "MalformedAuthorizationHeader": {
        "description": "The provided Authorization header was malformed.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "parameters": {},
    "requestBodies": {},
    "headers": {},
    "securitySchemes": {
      "id.discoos.io": {
        "type": "openID",
        "description": "This endpoint requires an identity token passed issed from https://id.discoos.io as a [Bearer token](https://swagger.io/docs/specification/authentication/bearer-authentication/) issued by in an [Authorization header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization).",
        "openIdConnectUrl": "https://id.discoos.io"
      }
    },
    "callbacks": {}
  }
}
