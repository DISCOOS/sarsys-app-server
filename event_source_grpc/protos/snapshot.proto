syntax = "proto3";

option java_package = "org.discoos.sarsys.protobuf";
option java_outer_classname = "SarSysProto";
option java_multiple_files = true;
option objc_class_prefix = "SarSys";
option cc_enable_arenas = true;

package org.discoos.es;

import "file.proto";
import "metric.proto";
import "aggregate.proto";


service SnapshotService {
    // Get Snapshot metadata
    //
    // Service with return snapshot metadata for repository of given type
    rpc GetMeta(GetSnapshotMetaRequest) returns (GetSnapshotMetaResponse) {}

    // Execute configure snapshot command
    //
    // Service will configure snapshots of repository of given type
    rpc Configure(ConfigureSnapshotRequest) returns (ConfigureSnapshotResponse) {}

    // Execute save snapshot command
    //
    // Service will save snapshot of repository of given type
    rpc Save(SaveSnapshotRequest) returns (SaveSnapshotResponse) {}

    // Download snapshot file data
    //
    // Service will download snapshot file data for given aggregate type.
    rpc Download(DownloadSnapshotRequest) returns (stream org.discoos.io.FileChunk) {}

    // Upload snapshot file data and load last snapshot in it
    //
    // Service will upload snapshot file data for given aggregate type.
    rpc Upload(stream SnapshotChunk) returns (UploadSnapshotResponse) {}

}

message GetSnapshotMetaRequest {
    // Snapshot for aggregate type
    string type = 1;

    // Expand response with metadata
    repeated SnapshotExpandFields expand = 2;
}

message GetSnapshotMetaResponse {
    // Snapshot for aggregate type
    string type = 1;

    // Response status code
    int32 statusCode = 2;

    // Response status code reason
    string reasonPhrase = 3;

    // Snapshot metadata
    SnapshotMeta meta = 4;
}

enum SnapshotExpandFields {

    // Only return default fields
    SNAPSHOT_EXPAND_FIELDS_NONE = 0;

    // Return all available fields
    SNAPSHOT_EXPAND_FIELDS_ALL = 1;

    // Extend response with aggregate metadata
    // items fields like lists of aggregates or events
    SNAPSHOT_EXPAND_FIELDS_ITEMS = 2;

    // Extend response with aggregate data field (if items are expanded)
    SNAPSHOT_EXPAND_FIELDS_DATA = 3;

    // Extend response with metrics metadata
    SNAPSHOT_EXPAND_FIELDS_METRICS = 4;

}

message SnapshotMeta {
    // Snapshot for aggregate type
    string type = 1;

    /// Uuid of this snapshot
    string uuid = 2;

    /// Uuid of snapshot with highest event number offset
    string last = 3;

    /// Event number of last event applied to snapshot
    int64  number = 4;

    /// Event position in stream of last event applied to snapshot
    int64  position = 5;

    /// Current snapshot configuration
    SnapshotConfig config = 6;

    /// Snapshot metrics metadata
    SnapshotMetricsMeta metrics = 7;

    /// List of aggregate metadata
    AggregateMetaList aggregates = 8;

}

message SnapshotConfig {
    int32 keep = 1;
    int32 threshold = 2;
    bool automatic = 3;
}

// Repository metrics object metadata
//
// Summarises repository metrics object metadata
message SnapshotMetricsMeta {

    // Total number snapshots
    int64 snapshots = 1;

    // Number of events after last save
    int64 unsaved = 2;

    // Number of events missing from snapshot
    int64 missing = 3;

    // Flag indicating if snapshot is partial
    bool isPartial = 4;

    // Cumulative and exponential moving average duration of save operations
    DurationMetricMeta save = 5;

}

// Configure snapshots of repository of given type
message ConfigureSnapshotRequest {

    // Aggregate type
    string type = 1;

    // Flag to activate automatic snapshots
    bool automatic = 2;

    // Number of snapshots to keep before deleting
    int32 keep = 3;

    // Maximum number of events applied to repository before next snapshot is taken
    int32 threshold = 4;

    // Expand response with given fields
    repeated SnapshotExpandFields expand = 5;

}

message ConfigureSnapshotResponse {

    // Aggregate type
    string type = 1;

    // Response status code
    int32 statusCode = 2;

    // Response status code reason
    string reasonPhrase = 3;

    // Snapshot metadata
    SnapshotMeta meta = 4;
}

// Save snapshot of repository of given type
message SaveSnapshotRequest {

    // Aggregate type
    string type = 1;

    // Flag to force save
    bool force = 2;

    // Expand response with given fields
    repeated SnapshotExpandFields expand = 3;

}

message SaveSnapshotResponse {

    // Aggregate type
    string type = 1;

    // Response status code
    int32 statusCode = 2;

    // Response status code reason
    string reasonPhrase = 3;

    // Snapshot metadata
    SnapshotMeta meta = 4;
}

// Download snapshot for given aggregate type
message DownloadSnapshotRequest {

    // Aggregate type
    string type = 1;

    // Size of each chunk in number of bytes
    uint64 chunkSize = 2;

}

message SnapshotChunk {

    // Aggregate type
    string type = 1;

    // Snapshot file chunk
    org.discoos.io.FileChunk chunk = 3;
}

message UploadSnapshotResponse {

    // Aggregate type
    string type = 1;

    // Size of each chunk in number of bytes
    uint64 chunkSize = 2;

    // Response status code
    int32 statusCode = 3;

    // Response status code reason
    string reasonPhrase = 4;

    // Snapshot metadata
    SnapshotMeta meta = 5;

}
