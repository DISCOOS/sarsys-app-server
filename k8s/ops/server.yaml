apiVersion: v1
kind: Service
metadata:
  name: sarsys-ops-server
  namespace: sarsys
spec:
  selector:
    type: api
    role: backend
    module: sarsys-ops-server
  ports:
    - port: 8082
      targetPort: 8082
  # StatefulSet needs a headless service
  clusterIP: None
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sarsys-ops-server
  namespace: sarsys
  annotations:
    kubernetes.io/ingress.class: traefik
    traefik.frontend.rule.type: PathPrefix
    traefik.ingress.kubernetes.io/frontend-entry-points: http,https
    traefik.ingress.kubernetes.io/redirect-entry-point: https
    # Enable transaction scope from apps that want
    # to ensure all requests going to the same ops instance
    traefik.ingress.kubernetes.io/affinity: "true"
    traefik.ingress.kubernetes.io/session-cookie-name: x-transaction-id
spec:
  rules:
    - host: sarsys.app
      http:
        paths:
          - path: /ops/api
            pathType: Prefix
            backend:
              service:
                name: sarsys-ops-server
                port:
                  number: 8082
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  # Must be equal to label 'module' (K8sApi uses this convention to build host name)
  name: sarsys-ops-server
  namespace: sarsys
  labels:
    module: sarsys-ops-server
spec:
  serviceName: sarsys-ops-server
  # Only one replicate should be created
  replicas: 1 # (ops server does support multiple instances)
  selector:
    matchLabels:
      module: sarsys-ops-server
  template:
    metadata:
      labels:
        type: api
        role: backend
        module: sarsys-ops-server
    spec:
      nodeSelector:
        # Only schedule on given node pool.
        doks.digitalocean.com/node-pool: k8s-2
      affinity:
        podAntiAffinity:
          # Spread as evenly on nodes in node pool as possible
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: "module"
                      operator: In
                      values:
                        - "sarsys-ops-server"
                topologyKey: "kubernetes.io/hostname"
      containers:
        - name: sarsys-ops-server
          image: discoos/sarsys_ops_server:latest
          # In development, setting `imagePullPolicy: Always` and using :latest tag is useful.
          imagePullPolicy: Always
          ports:
            - containerPort: 8082
          # Load configuration
          envFrom:
            - configMapRef:
                name: sarsys-ops-server-config
            - secretRef:
                name: sarsys-ops-server-secrets
          # Setup 'Downward API' - passed to
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          volumeMounts:
            - name: data
              mountPath: /var/lib/sarsys
          resources:
            requests:
              cpu: "250m"
              memory: "250Mi"
            limits:
              cpu: "500m"
              memory: "500Mi"
          readinessProbe:
            httpGet:
              path: /ops/api/healthz/ready
              port:  8082
              scheme: HTTP
            periodSeconds: 5
            timeoutSeconds: 1
            failureThreshold: 2
            initialDelaySeconds: 10
          livenessProbe:
            httpGet:
              path: /ops/api/healthz/alive
              port:  8082
              scheme: HTTP
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 4
            initialDelaySeconds: 10
      securityContext:
        runAsNonRoot: true
        # Needed for write access to volume with non-root user 1000
        fsGroup: 1000
        runAsUser: 1000
      #
      serviceAccountName: sarsys-user
      # Needed for accessing api-server from within the pod
      # Token is mounted at
      # /var/run/secrets/kubernetes.io/serviceaccount/token
      # Cert is mounted at
      # /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      automountServiceAccountToken: true

  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: do-block-storage-retain
        resources:
          requests:
            storage: 1Gi
