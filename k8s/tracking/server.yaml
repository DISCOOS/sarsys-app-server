apiVersion: v1
kind: Service
metadata:
  name: sarsys-tracking-server
  namespace: sarsys
spec:
  selector:
    app: sarsys-tracking-server
    role: backend
    type: api
  # StatefulSet needs a headless service
  # clusterIP: None
  ports:
    - port: 80
      targetPort: 8082
  clusterIP: None

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: sarsys-tracking-server
  namespace: sarsys
  labels:
    app: sarsys-tracking-server
spec:
  serviceName: sarsys-tracking-server
  replicas: 3
  selector:
    matchLabels:
      app: sarsys-tracking-server
  template:
    metadata:
      labels:
        app: sarsys-tracking-server
        role: backend
        type: api
    spec:
      # Only schedule on given node pool
      nodeSelector:
        doks.digitalocean.com/node-pool: k8s-4
      affinity:
        podAntiAffinity:
          # Spread as evenly on nodes in node pool as possible
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: "app"
                      operator: In
                      values:
                        - "sarsys-tracking-server"
                topologyKey: "kubernetes.io/hostname"
      containers:
        - name: sarsys-tracking-server
          image: discoos/sarsys_app_server:latest
          # In development, setting `imagePullPolicy: Always` and using :latest tag is useful.
          imagePullPolicy: Always
          ports:
            - containerPort: 8082
          # Load configuration
          envFrom:
            - configMapRef:
                name: sarsys-tracking-server-config
            - secretRef:
                name: sarsys-tracking-server-secrets
          # Setup 'Downward API' - passed to
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          volumeMounts:
            - name: data
              mountPath: /var/lib/sarsys
          resources:
            requests:
              cpu: "250m"
              memory: "400Mi"
            limits:
              cpu: "500m"
              memory: "600Mi"
          readinessProbe:
            httpGet:
              path: /api/healthz
              port:  8083
              scheme: HTTP
            # EventStoreConnection has
            # 10s as default connection
            # timeout. Ensure that
            # pod is marked as unready
            # as fast as possible
            periodSeconds: 5
            timeoutSeconds: 1
            failureThreshold: 2
            initialDelaySeconds: 120
          livenessProbe:
            httpGet:
              path: /api/healthz
              port:  8083
              scheme: HTTP
            # EventStoreConnection has
            # 10s as default connection
            # timeout. Ensure that pod is
            # not killed until this
            # multiples of this timeout
            # is reached.
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 4
            initialDelaySeconds: 120
      securityContext:
        runAsNonRoot: true
        # Needed for write access to volume with non-root user 1000
        fsGroup: 1000
        runAsUser: 1000
      serviceAccountName: sarsys-user

  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: do-block-storage-retain
        resources:
          requests:
            storage: 1Gi
